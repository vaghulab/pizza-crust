$MOD186
$EP
NAME TIMER

; =========================================================================
; Main Timer Driver Program
; Author: Vaghul Aditya Balaji

; This file contains proprietary information and cannot be copied 
; or distributed without prior permission from the author.
; =========================================================================

public	serial_rec_action, timer2_action
extrn	print_char:far, print_2hex:far, iodefine:far
extrn   set_timer2:far

;IO Setup for 80C188
	UMCR    EQU    0FFA0H ; Upper Memory Control Register
	LMCR    EQU    0FFA2H ; Lower Memory control Register         
	PCSBA   EQU    0FFA4H ; Peripheral Chip Select Base Address
	MMCS    EQU    0FFA6H ; Used for controlling the MCS pins on the 8088
	MPCS    EQU    0FFA8H ; MMCS and PCS Alter Control Register
	
	PORTA  EQU    0080H
	PORTB  EQU    0081H
	PORTC  EQU    0082H
	CWR    EQU    0083H
	
	INT0CON  EQU   0FF38H
	EOI      EQU   0FF22H
	IMASK    EQU   0FF28H
	
	PCS2_ADDR EQU 100H ; Used for controlling which BCD displays the digit
	PCS3_ADDR EQU 180H ; Used for controlling the pattern that is displayed on the BCDs
	PCS4_ADDR EQU 200H ; Used for controlling the DAC chip of the speaker system
	
	TIMER_COUNTER_BCD_LEN   EQU 24
	TIMER_COUNTER_KBD_LEN   EQU 48
	TIMEOUT_COUNTER_LEN		EQU 1540
	
	;Sound Mappings for playing on the speaker
	SOUND_SILENCE 		 	 EQU  44
	SOUND_AND      			 EQU  30
	SOUND_DOLLARS  			 EQU  33
	SOUND_CENTS    			 EQU  34
	SOUND_HUNDRED  			 EQU  28
	SOUND_THOUSAND 			 EQU  29
	SOUND_GOOD     			 EQU  35
	SOUND_AFTERNOON			 EQU  37
	SOUND_PURCHASED			 EQU  40
	SOUND_COST				 EQU  31
	SOUND_YOURCHANGEIS		 EQU  41
	SOUND_THANKYOUANDGOODBYE EQU  42	
	
	;Serial Communication Mappings
	NETWORK_DISABLE             EQU  00
	NETWORK_ENABLE              EQU  01	
	NETWORK_END_TRANSACTION     EQU  02
	NETWORK_LOGOUT			    EQU  03
	NETWORK_CANCEL_TRANSACTION  EQU  04
	
	;Cash Register State Mappings
	WAITING_FOR_LOGIN     EQU  00
	ENTER_LOGIN_USERNAME  EQU  01
	WAITING_FOR_BARCODE   EQU  02
	ENTER_BARCODE         EQU  03
	ENTER_QUANTITY        EQU  04
	DISPLAY_ITEM_PRICE    EQU  05
	CANCEL_ITEM		      EQU  06
	END_TRANSACTION		  EQU  07
	CHANGE_PAY 			  EQU  08
	
	;Keypad Character Mappings
	KBD_CHAR_RESET                 EQU  00
	KBD_BACKSPACE	               EQU  '_'
	KBD_ENTER                      EQU  '|'
	KBD_TRIGGER_LOGIN              EQU  'A'
	KBD_TRIGGER_TRANSACTION        EQU  'B'
	KBD_TRIGGER_NEW_ITEM		   EQU  'C'
	KBD_TRIGGER_CANCEL_ITEM		   EQU  'D'
	KBD_TRIGGER_CANCEL_TRANSACTION EQU  'E'
	KBD_TRIGGER_END_TRANSACTION    EQU  'F'
	KBD_TRIGGER_MODIFY			   EQU  'G'
	KBD_TRIGGER_DISPLAY_CURRENT    EQU  'H'
	KBD_TRIGGER_CHANGE_PAY         EQU  'I'
	KBD_TRIGGER_REFUND			   EQU  'J'
	KBD_TRIGGER_ANDROID			   EQU  'L'
	
	;Keyboard Input Constants
	KBD_USERNAME_LENGTH  EQU  06
	KBD_BARCODE_LENGTH   EQU  08
	KBD_QUANTITY_LENGTH  EQU  03
	KBD_CHANGE_LENGTH    EQU  08
	KBD_OLD_INPUT        EQU  00
	KBD_NEW_INPUT        EQU  01

	
STACK_SEG	SEGMENT
	DB	256 DUP(?)
	TOS	LABEL	WORD
STACK_SEG	ENDS


DATA_SEG	SEGMENT
	TIMER2_MESS	      DB	10,13,'TIMER2 INTERRUPT    '
	T_COUNT		      DB	2FH
	T_COUNT_SET	      DB	2FH
	REC_MESS	      DB	10,13,'Period of timer =     '
	CASH_REGISTER_ID  DB    'C2271]'
	
	;Keypad Variables	
	KEYS_PART1           DB   '|','0','_','L','K','J','9','8','7','I','H','G' 
	KEYS_PART2           DB   '6','5','4','F','E','D','3','2','1','C','B','A'
	KEY_FLAG             DB   00H ;This variable is used for controlling multiple detections of the same key-press inside the keypad loop
	KBD_NUM_INPUT        DB   00H ;This variable stores the numerical input from the keyboard
	KBD_CHAR_INPUT       DB   00H ;This variable stores the character input from the keyboard
	KBD_INPUT_STATE      DB   00H
	CHANGE_PLACE_VALUE   DB   00H
	CHANGE_PRICE         DB   10 DUP('0')
	USER_USERNAME	     DB   6 DUP('0')
	USER_PASSWORD        DB   6 DUP('0')
	USER_BARCODE         DB   8 DUP('0')
	USER_QUANTITY        DB   3 DUP('0')
	USER_INPUT_LENGTH    DB   00H	
	CHANGE_SUCCESS_FLAG  DB  00H
	
	;Sound Variables
	SOUND_OFFSET   DW   0000H, 1269H, 2121H, 2EA9H, 3BD3H, 478DH, 546EH, 6608H, 753DH, 7C41H
				   DW	8D0BH, 98C6H, 0AAF8H, 0BA1EH, 0CA87H, 0DB3CH, 9D67H, 055BH, 1E09H, 32B8H
				   DW   4A55H, 567AH, 60D6H, 6E3CH, 7A8BH, 8BFAH, 9E5BH, 0AA63H, 0B8D6H, 0C3F7H
				   DW   0CF67H, 0D6EAH, 0E31DH, 0F49EH, 06C9H, 13A6H, 1C5FH, 29DAH, 408FH, 5293H
				   DW   6634H, 83C7H, 0A00BH, 0C7B2H, 0CAD7H
			   
	SOUND_SIZE	   DW   1268H, 0EB7H, 0D87H, 0D29H, 0BB9H, 0CE0H, 1199H, 0F34H, 0703H, 10C9H
				   DW	0BBAH, 1231H, 0F25H, 1068H, 10B4H, 122AH, 1753H, 18ADH, 14AEH, 179CH
				   DW   0C24H, 0A5BH, 0D65H, 0C4EH, 116EH, 1260H, 0C07H, 0E72H, 0B20H, 0B6FH
				   DW   0782H, 0C32H, 1180H, 122AH, 0CDCH, 08B8H, 0D7AH, 16B4H, 1203H, 13A0H
				   DW   1D92H, 1C43H, 27A6H, 0324H, 031FH				   

	EEPROM_START   DW   4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H
				   DW	4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4500H, 5000H, 5000H, 5000H
				   DW   5000H, 5000H, 5000H, 5000H, 5000H, 5000H, 5000H, 5000H, 5000H, 5000H 
				   DW   5000H, 5000H, 5000H, 5000H, 6000H, 6000H, 6000H, 6000H, 6000H, 6000H
				   DW   6000H, 6000H, 6000H, 6000H, 6000H				   
 				   
	SOUND_ADDRESS        DW   0000H
	SOUND_COUNT          DW   0000H
	SOUND_QUEUE          DB   32 DUP(?)
	SOUND_HEAD           DB   00H
	SOUND_TAIL           DB   00H
	SOUND_INDEX_INPUT    DB   00H
	SAY_SOUND_ONCE_FLAG  DB   00H
	
	;7-Segment Variables
	; BCD Digit Mapping:    0	 1 	  2	   3    4    5    6    7    8    9    L	    E	 A    P
    BCD_NUMBERS	       DB  5FH, 50H, 6DH, 79H, 72H, 3BH, 3EH, 51H, 7FH, 73H, 0EH, 02FH, 77H, 67H  						
	BCD_DISPLAY	       DB  0EH, 0EH, 0EH, 0EH, 0EH, 0EH
	CURRENT_BCD        DB  00H
	TRIGGER_L_FLAG     DB  00H 
	TRIGGER_E_FLAG	   DB  00H 
	TRIGGER_A_FLAG     DB  00H 
	TRIGGER_P_FLAG     DB  00H 
	SHOW_BCD_ONCE_FLAG DB  00H
	
	;Timer Variables
	TIMER_COUNTER_BCD   DB  00H
    TIMER_COUNTER_KBD   DW  0000H
	TIMEOUT_COUNTER		DW  0000H
	TIMEOUT_SEC_COUNT   DB  00H
	
	;Serial Variables
	START_READ            DB  00H
	START_RECEIVE_PRICE   DB  00H
	SERIAL_INDEX          DB  00H
	ITEM_PRICE            DB  10 DUP('0')
	PLACE_VALUE           DB  00H
	TMP_PLACE_VALUE       DB  00H
	TWO_DIGIT_SOUND       DB  2 DUP(?)
	AND_FLAG              DB  00H
	CENTS_AND_FLAG        DB  00H
	THOUSAND_FLAG         DB  00H
	TOTAL_PRICE           DB  10 DUP('0')
	TOTAL_PLACE_VALUE     DB  00H
	CASH_REGISTER_START   DB  00H
	CASH_REGISTER_FLAG    DB  00H
	NETWORK_STATE         DB  00H
	CASH_REGISTER_STATE   DB  WAITING_FOR_LOGIN
	PURCHASE_ITEM_COUNT   DB  00H
	CHANGE_DONE_FLAG      DB  00H
	SWAP_JUMP_FLAG  	  DB  00H
	MODIFY_ITEM_FLAG      DB  00H
	USERNAME_FLAG		  DB  00H
	REFUND_FLAG			  DB  00H
	ANDROID_FLAG	      DB  00H
DATA_SEG	ENDS

	
CODE_SEG	SEGMENT

	PUBLIC		START

ASSUME	CS:CODE_SEG, SS:STACK_SEG, DS:DATA_SEG

START:
;initialize stack area
	MOV	AX,STACK_SEG		
	MOV	SS,AX
	MOV	SP,TOS
		
	MOV AX, DATA_SEG
	MOV DS, AX

; Initialize the on-chip peripherals
	CALL FAR PTR IODEFINE
	
; Initialize MPCS to MAP peripheral to IO address
	
	MOV  DX, MPCS  
	MOV  AX, 2083H 
	OUT  DX, AX
	
	MOV  DX, MMCS ; send MCS start address to 40000
	MOV  AX, 4003H 
	OUT  DX, AX

; PCSBA initial, set the parallel port start from 00H
	MOV DX, PCSBA
	MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
	OUT DX, AX

; Initialize LMCS 
    MOV DX, LMCR
    MOV AX, 01C4H  ; Starting address 1FFFH, 8K, No waits, last should be 5H for 1 waits      
    OUT DX, AX
	
	MOV AL, 89H ;mode 0, [A-out(for led)] [B - out, C-in (for reading keypad))]
	MOV DX, CWR ; load CWR to DX
	OUT DX, AL	;load CWR value from AL
	
; ######################### Start of User Main Routine ###########################
  
    CALL FAR PTR set_timer2
    STI
		
	NEXT:
		JMP NEXT
	
; ######################### End of User Main Routine #############################	


;Procedure to change the state of the cash register according to user's input
CHANGE_CASHIER_STATE PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX

	CMP CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	JE CASHIER_WAITING_FOR_LOGIN
	
	CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
	JE CASHIER_ENTER_USERNAME	
	
	CMP CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	JE FIRST_JUMP_WAITING_FOR_BARCODE
	
	CMP CASH_REGISTER_STATE, ENTER_BARCODE
	JE FIRST_JUMP_ENTER_BARCODE
	
	CMP CASH_REGISTER_STATE, ENTER_QUANTITY
	JE FIRST_JUMP_ENTER_QUANTITY
	
	CMP CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	JE FIRST_JUMP_DISPLAY_ITEM_PRICE
	
	CMP CASH_REGISTER_STATE, CANCEL_ITEM
	JE FIRST_JUMP_CANCEL_ITEM
	
	CMP CASH_REGISTER_STATE, CHANGE_PAY
	JE FIRST_JUMP_CHANGE_PAY
	
	CMP CASH_REGISTER_STATE, END_TRANSACTION
	JE FIRST_JUMP_END_TRANSACTION

	JMP FIRST_JUMP_STATE_END

;Waiting for user to press the login button	
CASHIER_WAITING_FOR_LOGIN:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
	JNE FIRST_JUMP_STATE_END
	MOV CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
	CALL FAR PTR STATE_TRANSITION
	JMP FIRST_JUMP_STATE_END
	
;User is now entering his/her login credentials
CASHIER_ENTER_USERNAME:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE USERNAME_CHECK_NUMBER
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
	JNE USERNAME_CHECK_BACKSPACE
	MOV TRIGGER_L_FLAG, 01H
	MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	MOV USERNAME_FLAG, 00H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END	
FIRST_JUMP_STATE_END:
	JMP CASHIER_STATE_END
FIRST_JUMP_WAITING_FOR_BARCODE:
	JMP CASHIER_WAITING_FOR_BARCODE
FIRST_JUMP_ENTER_BARCODE:
	JMP CASHIER_ENTER_BARCODE
FIRST_JUMP_ENTER_QUANTITY:
	JMP CASHIER_ENTER_QUANTITY
FIRST_JUMP_DISPLAY_ITEM_PRICE:
	JMP CASHIER_DISPLAY_ITEM_PRICE
FIRST_JUMP_CANCEL_ITEM:
	JMP CASHIER_CANCEL_ITEM
FIRST_JUMP_END_TRANSACTION:
	JMP CASHIER_END_TRANSACTION
FIRST_JUMP_CHANGE_PAY:
	JMP CASHIER_CHANGE_PAY
USERNAME_CHECK_BACKSPACE:
	CMP KBD_CHAR_INPUT, KBD_BACKSPACE
	JNE USERNAME_CHECK_ENTER
	CALL FAR PTR BACKSPACE_KEYPRESS
	JMP CASHIER_STATE_END
USERNAME_CHECK_ENTER:
	CMP KBD_CHAR_INPUT, KBD_ENTER
	JNE USERNAME_CHECK_NUMBER
	CMP USER_INPUT_LENGTH, KBD_USERNAME_LENGTH
	JNE FIRST_JUMP_STATE_END
	CMP USERNAME_FLAG, 01H
	JNE CONTINUE_TO_PASSWORD
	MOV NETWORK_STATE, NETWORK_ENABLE
	CALL FAR PTR STATE_TRANSITION
	JMP FIRST_JUMP_STATE_END
CONTINUE_TO_PASSWORD:
	MOV USERNAME_FLAG, 01H
	MOV CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
	CALL FAR PTR STATE_TRANSITION
	JMP FIRST_JUMP_STATE_END
USERNAME_CHECK_NUMBER:	
	CMP USER_INPUT_LENGTH, KBD_USERNAME_LENGTH
	JE FIRST_JUMP_STATE_END
	CALL FAR PTR GET_USER_DIGIT
SECOND_JUMP_STATE_END:
	JMP CASHIER_STATE_END	
	
;Waiting for the user to begin a new transaction
CASHIER_WAITING_FOR_BARCODE:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE SECOND_JUMP_STATE_END
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
	JNE BARCODE_CHECK_TRANSACTION
	MOV TRIGGER_L_FLAG, 01H
	MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	MOV NETWORK_STATE, NETWORK_LOGOUT
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END	
BARCODE_CHECK_TRANSACTION:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_TRANSACTION
	JNE BARCODE_REFUND
	MOV CASH_REGISTER_STATE, ENTER_BARCODE
	CALL FAR PTR STATE_TRANSITION
	CALL FAR PTR CLEAR_ALL_VARIABLES
	JMP CASHIER_STATE_END
BARCODE_REFUND:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_REFUND
	JNE SECOND_JUMP_STATE_END
	MOV REFUND_FLAG, 01H
	MOV CASH_REGISTER_STATE, ENTER_BARCODE
	CALL FAR PTR STATE_TRANSITION
	JMP SECOND_JUMP_STATE_END
	
;User is now entering the barcode
CASHIER_ENTER_BARCODE:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE FIRST_JMP_BARCODE_CHECK_NUMBER
	CMP KBD_CHAR_INPUT, KBD_BACKSPACE
	JNE BARCODE_CANCEL_ITEM
	CALL FAR PTR BACKSPACE_KEYPRESS
	JMP CASHIER_STATE_END
BARCODE_CANCEL_ITEM:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
	JNE BARCODE_CHECK_ENTER
	CMP REFUND_FLAG, 01H
	JNE NORMAL_CANCEL_BARCODE
	MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	MOV REFUND_FLAG, 00H
	MOV TRIGGER_P_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
NORMAL_CANCEL_BARCODE:
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV MODIFY_ITEM_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
FIRST_JMP_BARCODE_CHECK_NUMBER:
	JMP BARCODE_CHECK_NUMBER
BARCODE_CHECK_ENTER:
	CMP KBD_CHAR_INPUT, KBD_ENTER
	JNE BARCODE_CHECK_NUMBER
	CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
	JNE THIRD_JUMP_STATE_END
	CMP REFUND_FLAG, 01H
	JNE NORMAL_BARCODE_ENTER
	MOV NETWORK_STATE, NETWORK_ENABLE
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
NORMAL_BARCODE_ENTER:
	MOV CASH_REGISTER_STATE, ENTER_QUANTITY
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
BARCODE_CHECK_NUMBER:	
	CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
	JE THIRD_JUMP_STATE_END
	CALL FAR PTR GET_USER_DIGIT
THIRD_JUMP_STATE_END:
	JMP CASHIER_STATE_END	

;User is now entering the quantity	
CASHIER_ENTER_QUANTITY:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE QUANTITY_CHECK_NUMBER
	CMP KBD_CHAR_INPUT, KBD_BACKSPACE
	JNE QUANTITY_CANCEL_ITEM
	CALL FAR PTR BACKSPACE_KEYPRESS
	JMP CASHIER_STATE_END
QUANTITY_CANCEL_ITEM:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
	JNE QUANTITY_CHECK_ANDROID
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV MODIFY_ITEM_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
QUANTITY_CHECK_ANDROID:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_ANDROID
	JNE QUANTITY_CHECK_ENTER
	CMP USER_INPUT_LENGTH, 00H
	JE THIRD_JUMP_STATE_END
	MOV ANDROID_FLAG, 01H
	JMP BYPASS_ANDROID_END
QUANTITY_CHECK_ENTER:
	CMP KBD_CHAR_INPUT, KBD_ENTER
	JNE QUANTITY_CHECK_NUMBER
	CMP USER_INPUT_LENGTH, 00H
	JE THIRD_JUMP_STATE_END
BYPASS_ANDROID_END:
	MOV NETWORK_STATE, NETWORK_ENABLE
	MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
	CALL FAR PTR CLEAR_7SEGMENT
	JMP CASHIER_STATE_END
QUANTITY_CHECK_NUMBER:	
	CMP USER_INPUT_LENGTH, KBD_QUANTITY_LENGTH
	JE FOURTH_JUMP_STATE_END
	CALL FAR PTR GET_USER_DIGIT
FOURTH_JUMP_STATE_END:
	JMP CASHIER_STATE_END

;Cash register is now displaying the item price after receiving it via serial
CASHIER_DISPLAY_ITEM_PRICE:
	CMP SHOW_BCD_ONCE_FLAG, 01H
	JE CONTINUE_WITH_SOUND_PRICE
	MOV SHOW_BCD_ONCE_FLAG, 01H
	CALL FAR PTR DISPLAY_PRICE_ON_BCD
CONTINUE_WITH_SOUND_PRICE:
	CMP SAY_SOUND_ONCE_FLAG, 01H
	JE PRICE_CHECK_NEW_ITEM
	INC PURCHASE_ITEM_COUNT
	MOV SAY_SOUND_ONCE_FLAG, 01H
	MOV SOUND_INDEX_INPUT, SOUND_COST ;To say the word 'cost'
	CALL FAR PTR ADD_SOUND_INDEX
	MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
	CALL FAR PTR ADD_SOUND_INDEX
	CALL FAR PTR POPULATE_SOUND_QUEUE
	CALL FAR PTR ADD_INCOMING_PRICE
PRICE_CHECK_NEW_ITEM:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_NEW_ITEM
	JNE PRICE_CANCEL_TRANSACTION
	MOV CASH_REGISTER_STATE, ENTER_BARCODE
	MOV SAY_SOUND_ONCE_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 00H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
PRICE_CANCEL_TRANSACTION:	
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
	JNE PRICE_VIEW_CURRENT
	CMP PURCHASE_ITEM_COUNT, 00H
	JE BYPASS_CANCEL_TRANSACTION
	MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
BYPASS_CANCEL_TRANSACTION:
	MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	MOV TRIGGER_P_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	CALL FAR PTR CLEAR_ALL_VARIABLES
	JMP CASHIER_STATE_END
PRICE_VIEW_CURRENT:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_DISPLAY_CURRENT
	JNE PRICE_CANCEL_ITEM
	CMP PURCHASE_ITEM_COUNT, 00H
	JE FIFTH_JUMP_STATE_END
	MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased'
	CALL FAR PTR ADD_SOUND_INDEX
	JMP BYPASS_VIEW_TOTAL
PRICE_CANCEL_ITEM:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
	JNE PRICE_END_TRANSACTION
	CMP PURCHASE_ITEM_COUNT, 00H
	JE DISPLAY_ERROR_CODE_PRICE
	MOV CASH_REGISTER_STATE, CANCEL_ITEM
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
DISPLAY_ERROR_CODE_PRICE:
	MOV TRIGGER_E_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
FIFTH_JUMP_STATE_END:
	JMP CASHIER_STATE_END
PRICE_END_TRANSACTION:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_END_TRANSACTION
	JNE PRICE_MODIFY_ITEM
	CMP PURCHASE_ITEM_COUNT, 00H
	JE BYPASS_CANCEL_TRANSACTION
	MOV CASH_REGISTER_STATE, END_TRANSACTION
	MOV NETWORK_STATE, NETWORK_END_TRANSACTION
	MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased'
	CALL FAR PTR ADD_SOUND_INDEX
BYPASS_VIEW_TOTAL:
	CALL FAR PTR STATE_TRANSITION
	XOR CX, CX
	XOR BX, BX
	MOV CL, 10
TRANSFER_TO_ITEM_PRICE:
	MOV AL, TOTAL_PRICE[BX]
	MOV ITEM_PRICE[BX], AL
	INC BX
	LOOP TRANSFER_TO_ITEM_PRICE
	MOV AL, TOTAL_PLACE_VALUE
	ADD AL, 48
	MOV PLACE_VALUE, AL
	MOV TMP_PLACE_VALUE, AL
	SUB AL, 43
	MOV SERIAL_INDEX, AL
	CALL FAR PTR DISPLAY_PRICE_ON_BCD
	CALL FAR PTR POPULATE_SOUND_QUEUE
	CMP CASH_REGISTER_STATE, CHANGE_PAY
	JE FIRST_JUMP_CHANGE_REMAINING
	JMP CASHIER_STATE_END
PRICE_MODIFY_ITEM:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_MODIFY
	JNE FIFTH_JUMP_STATE_END
	CMP PURCHASE_ITEM_COUNT, 00H
	JE DISPLAY_ERROR_MODIFY_PRICE
	MOV CASH_REGISTER_STATE, ENTER_BARCODE
	MOV MODIFY_ITEM_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
DISPLAY_ERROR_MODIFY_PRICE:
	MOV TRIGGER_E_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION	
	JMP CASHIER_STATE_END
	
; Cashier is now cancelling a single item in the transaction
CASHIER_CANCEL_ITEM:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE CANCEL_CHECK_NUMBER
	CMP KBD_CHAR_INPUT, KBD_BACKSPACE
	JNE CANCEL_CHECK_AGAIN
	CALL FAR PTR BACKSPACE_KEYPRESS
	JMP CASHIER_STATE_END
CANCEL_CHECK_AGAIN:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
	JNE CANCEL_CHECK_ENTER
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	JMP CASHIER_STATE_END
FIRST_JUMP_CHANGE_REMAINING:
	JMP CHANGE_REMAINING
CANCEL_CHECK_ENTER:
	CMP KBD_CHAR_INPUT, KBD_ENTER
	JNE CANCEL_CHECK_NUMBER
	CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
	JNE SIXTH_JUMP_STATE_END
	MOV NETWORK_STATE, NETWORK_ENABLE
	CALL FAR PTR STATE_TRANSITION
SIXTH_JUMP_STATE_END:
	JMP CASHIER_STATE_END
CANCEL_CHECK_NUMBER:	
	CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
	JE SIXTH_JUMP_STATE_END
	CALL FAR PTR GET_USER_DIGIT
	JMP SIXTH_JUMP_STATE_END
	
; Cashier is now ending the transaction	
CASHIER_END_TRANSACTION:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
	JNE END_CHANGE_PAY
	MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
	JMP BYPASS_CANCEL_TRANSACTION
END_CHANGE_PAY:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CHANGE_PAY
	JNE SIXTH_JUMP_STATE_END
	MOV CASH_REGISTER_STATE, CHANGE_PAY
	CALL FAR PTR STATE_TRANSITION
	MOV CHANGE_PLACE_VALUE, 00H
	JMP CASHIER_STATE_END
	
;Cashier is now calculating the change
CASHIER_CHANGE_PAY:
	CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
	JE CHANGE_NUMBER
	CMP KBD_CHAR_INPUT, KBD_BACKSPACE
	JNE CHANGE_CANCEL_TRANSACTION
	CALL FAR PTR BACKSPACE_KEYPRESS
	JMP CASHIER_STATE_END
CHANGE_CANCEL_TRANSACTION:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
	JNE CHANGE_END_TRANSACTION
	MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
	JMP BYPASS_CANCEL_TRANSACTION
CHANGE_END_TRANSACTION:
	CMP KBD_CHAR_INPUT, KBD_TRIGGER_END_TRANSACTION
	JNE CHANGE_CHECK_ENTER
	CMP CHANGE_DONE_FLAG, 01H
	JNE SEVENTH_JUMP_STATE_END
	MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	MOV TRIGGER_P_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	CALL FAR PTR CLEAR_ALL_VARIABLES
SEVENTH_JUMP_STATE_END:
	JMP CASHIER_STATE_END
CHANGE_NUMBER:	
	CMP KBD_INPUT_STATE, KBD_OLD_INPUT
	JE SEVENTH_JUMP_STATE_END
	CMP CHANGE_DONE_FLAG, 01H
	JE SEVENTH_JUMP_STATE_END
	CMP USER_INPUT_LENGTH, KBD_CHANGE_LENGTH
	JE SEVENTH_JUMP_STATE_END
	INC CHANGE_PLACE_VALUE
	CALL FAR PTR GET_USER_DIGIT
	JMP CASHIER_STATE_END
CHANGE_CHECK_ENTER:
	CMP KBD_CHAR_INPUT, KBD_ENTER
	JNE CASHIER_STATE_END
	CMP CHANGE_DONE_FLAG, 01H
	JE CASHIER_STATE_END
	CMP USER_INPUT_LENGTH, 02H
	JL CASHIER_STATE_END
	XOR BX, BX
	MOV BL, CHANGE_PLACE_VALUE
	MOV AL, CHANGE_PRICE[BX-1]
	MOV CHANGE_PRICE[BX], AL
	MOV AL, CHANGE_PRICE[BX-2]
	MOV CHANGE_PRICE[BX-1], AL
	MOV CHANGE_PRICE[BX-2], '.'
	SUB CHANGE_PLACE_VALUE, 2
	CALL FAR PTR CALCULATE_CHANGE
	CMP CHANGE_SUCCESS_FLAG, 00H
	JE FINISH_CHANGE
	MOV CASH_REGISTER_STATE, END_TRANSACTION
	MOV TRIGGER_E_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	MOV CHANGE_SUCCESS_FLAG, 00H
	JMP CASHIER_STATE_END
FINISH_CHANGE:
	MOV SOUND_INDEX_INPUT, SOUND_YOURCHANGEIS ;To say the phrase 'your change is'
	CALL FAR PTR ADD_SOUND_INDEX
	JMP BYPASS_VIEW_TOTAL
CHANGE_REMAINING:
	MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
	CALL FAR PTR ADD_SOUND_INDEX
	MOV SOUND_INDEX_INPUT, SOUND_THANKYOUANDGOODBYE ;To say the phrase 'thank you and goodbye'
	CALL FAR PTR ADD_SOUND_INDEX
	MOV CHANGE_DONE_FLAG, 01H
	JMP CASHIER_STATE_END
	
CASHIER_STATE_END:	
	MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
	MOV KBD_INPUT_STATE, KBD_OLD_INPUT
	POP	CX
	POP	BX
	POP AX
	RET
CHANGE_CASHIER_STATE ENDP


;Procedure to add user's numeric input to a corresponding array depending on the state
GET_USER_DIGIT PROC FAR
	PUSH AX
	PUSH BX
	
	CMP KBD_INPUT_STATE, KBD_OLD_INPUT
	JE GET_USER_DIGIT_END
	
	XOR BX, BX
	MOV BL, USER_INPUT_LENGTH
	MOV AL, KBD_NUM_INPUT
	CALL FAR PTR ADD_BCD_QUEUE
	MOV SOUND_INDEX_INPUT, AL
	CALL FAR PTR ADD_SOUND_INDEX
	ADD AL, 48
	
	CMP CASH_REGISTER_STATE, ENTER_QUANTITY
	JE MOV_AL_QUANTITY
	
	CMP USERNAME_FLAG, 01H
	JE MOV_AL_PASSWORD
	
	CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
	JE MOV_AL_USERNAME
	
	CMP CASH_REGISTER_STATE, CHANGE_PAY
	JE MOV_AL_CHANGE
	
	MOV USER_BARCODE[BX], AL
	JMP CONTINUE_GET_DIGIT
	
MOV_AL_QUANTITY:
	MOV USER_QUANTITY[BX], AL
	JMP CONTINUE_GET_DIGIT
	
MOV_AL_PASSWORD:
	MOV USER_PASSWORD[BX], AL
	JMP CONTINUE_GET_DIGIT
	
MOV_AL_USERNAME:
	MOV USER_USERNAME[BX], AL
	JMP CONTINUE_GET_DIGIT
	
MOV_AL_CHANGE:
	MOV CHANGE_PRICE[BX], AL
	JMP CONTINUE_GET_DIGIT	
	
CONTINUE_GET_DIGIT:
	INC USER_INPUT_LENGTH
	MOV KBD_INPUT_STATE, KBD_OLD_INPUT

GET_USER_DIGIT_END:	
	POP	BX
	POP AX
	RET
GET_USER_DIGIT ENDP


;Procedure to clear all variables before cancelling/ending a transaction
CLEAR_ALL_VARIABLES PROC FAR
	PUSH BX
	PUSH CX
	
	MOV CHANGE_PLACE_VALUE, 00H
	MOV SAY_SOUND_ONCE_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 00H
	MOV SERIAL_INDEX, 00H
	MOV TOTAL_PLACE_VALUE, 00H
	MOV CASH_REGISTER_START, 00H
	MOV PURCHASE_ITEM_COUNT, 00H
	MOV CHANGE_DONE_FLAG, 00H
	MOV SWAP_JUMP_FLAG, 00H
	MOV MODIFY_ITEM_FLAG, 00H
	MOV USERNAME_FLAG, 00H
	MOV REFUND_FLAG, 00H
	MOV CHANGE_SUCCESS_FLAG, 00H
	MOV ANDROID_FLAG, 00H
	
	XOR BX, BX
	XOR CX, CX
	MOV CL, 10
CLEAR_PRICES:
	MOV CHANGE_PRICE[BX], '0'
	MOV ITEM_PRICE[BX], '0'
	MOV TOTAL_PRICE[BX], '0'
	INC BX
	LOOP CLEAR_PRICES

CLEAR_VARIABLES_END:	
	POP	CX
	POP	BX
	RET
CLEAR_ALL_VARIABLES ENDP


;Procedure to clear variables when changing states
STATE_TRANSITION PROC FAR	
	MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
	MOV USER_INPUT_LENGTH, 00H
	MOV KBD_INPUT_STATE, KBD_OLD_INPUT
	CALL FAR PTR CLEAR_7SEGMENT
	RET
STATE_TRANSITION ENDP


;Procedure to remove user's most recent keyboard input and replace it with a zero on the BCD
BACKSPACE_KEYPRESS PROC FAR	
	PUSH AX

	CMP USER_INPUT_LENGTH, 00H
	JE BACKSPACE_KEYPRESS_END
	DEC USER_INPUT_LENGTH
	DEC CHANGE_PLACE_VALUE
	
	MOV AL, BCD_DISPLAY[1]
	MOV BCD_DISPLAY[0], AL
	MOV AL, BCD_DISPLAY[2]
	MOV BCD_DISPLAY[1], AL
	MOV AL, BCD_DISPLAY[3]
	MOV BCD_DISPLAY[2], AL
	MOV AL, BCD_DISPLAY[4]
	MOV BCD_DISPLAY[3], AL
	MOV AL, BCD_DISPLAY[5]
	MOV BCD_DISPLAY[4], AL
	MOV AL, BCD_NUMBERS[0]
	MOV BCD_DISPLAY[5], AL
	
	MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
	
BACKSPACE_KEYPRESS_END:	
	POP AX
	RET
BACKSPACE_KEYPRESS ENDP


;Procedure that will display the price received via serial on the 7-segment display
DISPLAY_PRICE_ON_BCD PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX

	XOR BX, BX
	XOR CX, CX
	
	CMP PLACE_VALUE, 'E'
	JNE CONTINUE_NORMAL_DISPLAY
	MOV AL, BCD_NUMBERS[11]
	MOV BCD_DISPLAY[0], AL
	MOV CL, SERIAL_INDEX
	SUB CL, 2
	JMP PUT_DIGIT_IN_BCD
	
CONTINUE_NORMAL_DISPLAY:
	MOV CL, PLACE_VALUE
	SUB CL, 45 ;Subtract 48 to convert to number and add 3 to take care of decimal digits
	
	CMP CL, 7
	JLE PUT_DIGIT_IN_BCD
	MOV CL, 7
	
PUT_DIGIT_IN_BCD:	
	MOV AL, ITEM_PRICE[BX]
	CMP AL, '.'
	JE DECIMAL_ADD
	SUB AL, 48
	MOV KBD_NUM_INPUT, AL
	CALL FAR PTR ADD_BCD_QUEUE
	JMP END_PUT_DIGIT_LOOP
	
DECIMAL_ADD:
	MOV AL, BCD_DISPLAY[0]
	OR AL, 80H
	MOV BCD_DISPLAY[0], AL
	
END_PUT_DIGIT_LOOP:
	INC BX
	LOOP PUT_DIGIT_IN_BCD

DISPLAY_PRICE_ON_BCD_END:	
	POP	CX
	POP	BX
	POP AX
	RET
DISPLAY_PRICE_ON_BCD ENDP


;Procedure to read both the keypads for user inputs
KEYPAD_READ PROC FAR
	PUSH DX
	PUSH CX
	PUSH BX
	PUSH AX
	PUSH SI
	                                
	MOV BL, 00H        ;initialize BL for key code
	XOR AL, AL        ;clear all flags
	MOV DX, PORTB  ;port B address to DX
	OUT DX, AL        ;ground all rows
	MOV DX, PORTC        ;Port C address to DX
             
	IN AL, DX        ;read all columns
	AND AL,77H  ;D0-D2 and D4-D6 are the 6 input pins for two keypads 0111 0111(77H)                          
	CMP AL,77H
	JZ RESET_FLAG 

	CMP DS:KEY_FLAG, 01H
	JZ IGNORE_KEYPRESS        ;if flag is set don't send keypad input to hyperterminal

	MOV AL, 07FH       ;load data byte to ground a row
	MOV BH, 04H        ;set row counter

NXTROW:                
	ROL AL, 01H       ;rotate AL to ground next row
	MOV CH, AL        ;save data byte to ground next row
	MOV DX, PORTB        ;port B address to DX
	OUT DX, AL        ;ground one of the rows
	MOV DX, PORTC        ;port C address to DX
	IN AL, DX        ;read input port for key closure
	
	MOV AH,AL
	ROR AH,01H
	
	AND AH,38H
	AND AL,07H
	OR AL,AH

	AND AL,3FH ;D0-D2 and D4-D6 are the 6 input pins for two keypads 0111 0111(77H)
	MOV CL, 06H        ;set column counter

POLL_COLUMNS:        
	RCR AL, 01H       ;move D0 to CF        
	JNC SEND_KEY        ;key closure is found, if CF=0
	INC BL                ;inc BL for next binary key code                         

	DEC CL                ;dec column counter if no key closure
	JNZ POLL_COLUMNS        ;check for key closure in next column
	MOV AL, CH        ;Load data byte to ground next row
	DEC BH                ;if no key closure found in all columns in this row, go to ground next row
	JNZ NXTROW        ;go back to ground next row	
	JMP SKIP_SEND       

RESET_FLAG:
	MOV DS:KEY_FLAG, 00H  ;if no keypad input is found, reset flag so that next keypad input is printed
	
IGNORE_KEYPRESS:
	CALL FAR PTR CHANGE_CASHIER_STATE ;Function call to check if there is a change in the cash register's state	
	CMP CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	JE TEMP_JUMP_SKIP_SEND
	CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
	JE TEMP_JUMP_SKIP_SEND
	INC TIMEOUT_COUNTER
	CMP TIMEOUT_COUNTER, TIMEOUT_COUNTER_LEN
	JNE TEMP_JUMP_SKIP_SEND
	MOV TIMEOUT_COUNTER, 0
	INC TIMEOUT_SEC_COUNT
	CMP TIMEOUT_SEC_COUNT, 08H
	JNE SKIP_SEND
	MOV TRIGGER_L_FLAG, 01H
	MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	MOV TIMEOUT_SEC_COUNT, 0
	CALL FAR PTR STATE_TRANSITION
	CALL FAR PTR CLEAR_ALL_VARIABLES	
	MOV NETWORK_STATE, NETWORK_LOGOUT
TEMP_JUMP_SKIP_SEND:
	JMP SKIP_SEND ;if flag is set don't send keypad input to hyperterminal
	
SEND_KEY:
	CMP BL,0BH
	JG LOAD_KEYS_PART2
        
LOAD_KEYS_PART1:        
    LEA SI,KEYS_PART1 
    JMP SEND_CHAR
        
LOAD_KEYS_PART2:
    SUB BL,0CH
    LEA SI,KEYS_PART2
        
SEND_CHAR:
    XOR AX, AX
    MOV AL,BL
    ADD SI,AX
    MOV AL,[SI]
	
    SUB AL, 48 ;Converting to number
	CMP AL, 09H ;If number is > 9 then it is some other character and not a numeric digit
	JLE SEND_NUMBER
	
	ADD AL, 48
	MOV KBD_CHAR_INPUT, AL
	JMP KEYPAD_END

SEND_NUMBER:
	;manipulating the number
	MOV KBD_NUM_INPUT, AL
	MOV KBD_INPUT_STATE, KBD_NEW_INPUT
	
KEYPAD_END:
    MOV DS:KEY_FLAG, 01H ;set flag to one so that next time same key input is not printed
	MOV TIMEOUT_SEC_COUNT, 0
	MOV TIMEOUT_COUNTER, 0
        
SKIP_SEND:
	POP SI
	POP AX
	POP BX
	POP CX
	POP DX
	RET	
KEYPAD_READ ENDP


;Procedure that will add user's numeric input to the BCD display
ADD_BCD_QUEUE PROC FAR
	PUSH AX
	PUSH BX

	XOR BX, BX

	MOV BL, KBD_NUM_INPUT
	MOV AH, BCD_NUMBERS[BX]
	
	MOV AL, BCD_DISPLAY[4]
	MOV BCD_DISPLAY[5], AL
	MOV AL, BCD_DISPLAY[3]
	MOV BCD_DISPLAY[4], AL
	MOV AL, BCD_DISPLAY[2]
	MOV BCD_DISPLAY[3], AL
	MOV AL, BCD_DISPLAY[1]
	MOV BCD_DISPLAY[2], AL
	MOV AL, BCD_DISPLAY[0]
	MOV BCD_DISPLAY[1], AL		
	MOV BCD_DISPLAY[0], AH
	
BCD_ADD_END:	
	POP	BX
	POP AX
	RET
ADD_BCD_QUEUE ENDP
		

;Procedure that is called whenever something is being sent via serial
SERIAL_REC_ACTION	PROC	FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	CMP CASH_REGISTER_START, 01H
	JE FIRST_JUMP_CASHIER_RECEIVER
	
	CMP START_READ, 01H
	JE START_READING_ID_VALUES
	
	CMP AL, '['
	JE START_READING_ID
	JMP END_SERIAL_COMMUNICATION
	
START_READING_ID:
	INC CASH_REGISTER_FLAG
	MOV START_READ, 01H
	JMP END_SERIAL_COMMUNICATION
	
START_READING_ID_VALUES:
	XOR BX, BX
	MOV BL, CASH_REGISTER_FLAG
	DEC BX
	
	CMP AL, CASH_REGISTER_ID[BX]
	JNE FIRST_JUMP_INITIALIZE_TERMINATE
	CMP CASH_REGISTER_FLAG, 06H
	JNE NORMAL_ID_CHECK
	CMP NETWORK_STATE, NETWORK_DISABLE
	JE FIRST_JUMP_NEGATIVE_ACKNOWLEDGEMENT
	CMP NETWORK_STATE, NETWORK_END_TRANSACTION
	JE SEND_END_TRANSACTION_ACK
	CMP NETWORK_STATE, NETWORK_LOGOUT
	JE SEND_LOGOUT_ACK
	CMP NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
	JE SEND_CANCEL_ACK
	MOV CASH_REGISTER_START, 01H
	CALL FAR PTR SEND_TO_PC
	JMP END_SERIAL_COMMUNICATION
NORMAL_ID_CHECK:
	INC CASH_REGISTER_FLAG
	JMP END_SERIAL_COMMUNICATION
	
FIRST_JUMP_CASHIER_RECEIVER:
	JMP CASH_REGISTER_RECEIVE_START
	
FIRST_JUMP_INITIALIZE_TERMINATE:
	JMP INITIALIZE_TERMINATE_SERIAL
	
FIRST_JUMP_NEGATIVE_ACKNOWLEDGEMENT:
	JMP SEND_NEGATIVE_ACK
	
SEND_LOGOUT_ACK:
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '2'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV NETWORK_STATE, NETWORK_DISABLE
	JMP INITIALIZE_TERMINATE_SERIAL

SEND_CANCEL_ACK:
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '3'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV NETWORK_STATE, NETWORK_DISABLE
	JMP INITIALIZE_TERMINATE_SERIAL	
	
SEND_END_TRANSACTION_ACK:
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '4'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV NETWORK_STATE, NETWORK_DISABLE
	JMP INITIALIZE_TERMINATE_SERIAL
	
SEND_NEGATIVE_ACK:
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '0'
	CALL FAR PTR PRINT_CHAR
	MOV AL, '*'
	CALL FAR PTR PRINT_CHAR
	
INITIALIZE_TERMINATE_SERIAL:
	MOV CASH_REGISTER_START, 00H
	MOV CASH_REGISTER_FLAG, 00H
	MOV START_READ, 00H
	
END_SERIAL_COMMUNICATION:
	JMP SERIAL_END

CASH_REGISTER_RECEIVE_START:		
	CMP START_RECEIVE_PRICE, 01H
	JE START_READING_DIGITS
	
	CMP AL, '('
	JE START_READING_PRICE
	JMP SERIAL_END
	
START_READING_PRICE:
	mov START_RECEIVE_PRICE, 01H
	JMP SERIAL_END
	
START_READING_DIGITS:
	CMP SERIAL_INDEX, 00H
	JE GET_PLACE_VALUE
	
	CMP AL, ';'
	JE TEMP_INDEX_INCREMENT
	
	CMP SERIAL_INDEX, 02H
	JGE GET_DIGITS
	
	JMP SERIAL_END
	
TEMP_INDEX_INCREMENT:
	INC SERIAL_INDEX
	JMP SERIAL_END
	
GET_DIGITS:
	CMP AL, ')'
	JE TERMINATE_SERIAL
	
	XOR BX, BX
	MOV BL, SERIAL_INDEX
	MOV ITEM_PRICE[BX-2], AL
	INC SERIAL_INDEX	
	JMP SERIAL_END
	
GET_PLACE_VALUE:
	INC SERIAL_INDEX
	MOV TMP_PLACE_VALUE, AL
	MOV PLACE_VALUE, AL
	JMP SERIAL_END
	
TERMINATE_SERIAL:
	MOV CASH_REGISTER_START, 00H
	MOV CASH_REGISTER_FLAG, 00H
	MOV START_READ, 00H
	MOV START_RECEIVE_PRICE, 00H
	MOV NETWORK_STATE, NETWORK_DISABLE
	
	CMP PLACE_VALUE, 'A'
	JE FIRST_JUMP_CHANGE_BARCODE_STATE
	
	CMP PLACE_VALUE, 'B'
	JE FIRST_JUMP_WRONG_LOGIN
	
	CMP PLACE_VALUE, 'D'
	JE FIRST_JUMP_WRONG_BARCODE
	
	CMP PLACE_VALUE, 'E'
	JE FIRST_JUMP_WRONG_QUANTITY
	
	CMP CASH_REGISTER_STATE, ENTER_QUANTITY
	JE FIRST_JUMP_PRICE_PROCESSING
	
	CMP CASH_REGISTER_STATE, CANCEL_ITEM
	JE CANCEL_ITEM_PROCESSING
	
	JMP SERIAL_END
	
FIRST_JUMP_CHANGE_BARCODE_STATE:
	JMP CHANGE_STATE_TO_BARCODE
	
FIRST_JUMP_WRONG_LOGIN:
	JMP DISPLAY_WRONG_LOGIN
	
FIRST_JUMP_WRONG_BARCODE:
	JMP DISPLAY_WRONG_BARCODE
	
FIRST_JUMP_WRONG_QUANTITY:
	JMP DISPLAY_WRONG_QUANTITY
	
FIRST_JUMP_PRICE_PROCESSING:
	JMP PRICE_PROCESSING
	
CANCEL_ITEM_PROCESSING:	
	MOV DL, TOTAL_PLACE_VALUE
	MOV CHANGE_PLACE_VALUE, DL		
	MOV AH, TMP_PLACE_VALUE
	SUB AH, 48
	MOV TOTAL_PLACE_VALUE, AH	
	XOR CX, CX
	XOR BX, BX
	MOV CL, 10
CREATE_PRICE_ITEMS:
	MOV DL, TOTAL_PRICE[BX]
	MOV CHANGE_PRICE[BX], DL
	MOV DL, ITEM_PRICE[BX]
	MOV TOTAL_PRICE[BX], DL
	INC BX
	LOOP CREATE_PRICE_ITEMS	
	CALL FAR PTR CALCULATE_CHANGE
	MOV CHANGE_PLACE_VALUE, 00H	
	XOR BX, BX
	MOV CL, 10
TOTAL_INPUT_PRICE_SWAP:
	MOV DL, TOTAL_PRICE[BX]
	MOV ITEM_PRICE[BX], DL
	MOV CHANGE_PRICE[BX], '0'
	INC BX
	LOOP TOTAL_INPUT_PRICE_SWAP	
	MOV AH, TOTAL_PLACE_VALUE
	ADD AH, 5
	MOV SERIAL_INDEX, AH
	ADD AH, 43
	MOV PLACE_VALUE, AH
	MOV TMP_PLACE_VALUE, AH	
	DEC PURCHASE_ITEM_COUNT
	CMP MODIFY_ITEM_FLAG, 01H
	JNE CONTINUE_CANCELLING	
	MOV SERIAL_INDEX, 00H
	MOV CASH_REGISTER_STATE, ENTER_QUANTITY
	MOV CASH_REGISTER_START, 01H
	MOV SHOW_BCD_ONCE_FLAG, 00H
	MOV SAY_SOUND_ONCE_FLAG, 00H
	JMP SERIAL_END
CONTINUE_CANCELLING:
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased'
	CALL FAR PTR ADD_SOUND_INDEX
	CALL FAR PTR DISPLAY_PRICE_ON_BCD
	CALL FAR PTR POPULATE_SOUND_QUEUE	
	MOV SERIAL_INDEX, 00H
	JMP SERIAL_END
	
PRICE_PROCESSING:
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV MODIFY_ITEM_FLAG, 00H
	CALL FAR PTR STATE_TRANSITION
	JMP SERIAL_END
	
CHANGE_STATE_TO_BARCODE:
	MOV SERIAL_INDEX, 00H
	MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	MOV TRIGGER_P_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	MOV SOUND_INDEX_INPUT, SOUND_GOOD ;To say the word 'good'
	CALL FAR PTR ADD_SOUND_INDEX
	MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
	CALL FAR PTR ADD_SOUND_INDEX
	MOV SOUND_INDEX_INPUT, SOUND_AFTERNOON ;To say the word 'afternoon'
	CALL FAR PTR ADD_SOUND_INDEX
	JMP SERIAL_END
	
DISPLAY_WRONG_LOGIN:
	MOV SERIAL_INDEX, 00H
	MOV TRIGGER_A_FLAG, 01H
	MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
	CALL FAR PTR STATE_TRANSITION
	JMP SERIAL_END
	
DISPLAY_WRONG_BARCODE:
	CMP REFUND_FLAG, 01H
	JNE NORMAL_WRONG_BARCODE
	MOV REFUND_FLAG, 00H
	MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
	CMP ITEM_PRICE[0], '1'
	JE SHOW_ALPHABET_P
	MOV TRIGGER_E_FLAG, 01H
	JMP CONTINUE_SEND_ERROR
NORMAL_WRONG_BARCODE:
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV TRIGGER_E_FLAG, 01H
CONTINUE_SEND_ERROR:
	MOV SERIAL_INDEX, 00H
	MOV MODIFY_ITEM_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H	
	CALL FAR PTR STATE_TRANSITION
	JMP SERIAL_END
SHOW_ALPHABET_P:
	MOV TRIGGER_P_FLAG, 01H
	JMP CONTINUE_SEND_ERROR
	
DISPLAY_WRONG_QUANTITY:
	MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
	MOV MODIFY_ITEM_FLAG, 00H
	MOV SHOW_BCD_ONCE_FLAG, 01H
	MOV SAY_SOUND_ONCE_FLAG, 01H
	CALL FAR PTR STATE_TRANSITION
	CALL FAR PTR DISPLAY_PRICE_ON_BCD
	MOV SERIAL_INDEX, 00H
	JMP SERIAL_END
	
SERIAL_END:
	POP DX
	POP	CX
	POP	BX
	POP AX
	RET
SERIAL_REC_ACTION	ENDP


;Procedure that will send the cash register input to the PC via serial
SEND_TO_PC PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX

	CMP REFUND_FLAG, 01H
	JE FIRST_JUMP_CANCEL_BARCODE
	
	CMP USERNAME_FLAG, 01H
	JE SEND_LOGIN_TO_PC
	
	CMP CASH_REGISTER_STATE, ENTER_QUANTITY
	JE SEND_TRANSACTION_TO_PC
	
	JMP FIRST_JUMP_CANCEL_BARCODE
	
	JMP SEND_PC_END

SEND_LOGIN_TO_PC:	
	MOV AL, '('
	CALL FAR PTR PRINT_CHAR
	XOR CX, CX
	XOR BX, BX
	MOV CL, KBD_USERNAME_LENGTH	
SEND_USERNAME:
	MOV AL, USER_USERNAME[BX]
	CALL FAR PTR PRINT_CHAR
	INC BX
	LOOP SEND_USERNAME		
	MOV AL, ';'
	CALL FAR PTR PRINT_CHAR
	XOR BX, BX
	MOV CL, KBD_USERNAME_LENGTH	
SEND_PASSWORD:
	MOV AL, USER_PASSWORD[BX]
	ADD AL, BL
	ADD AL, 15
	CALL FAR PTR PRINT_CHAR
	INC BX
	LOOP SEND_PASSWORD	
	MOV AL, ')'
	CALL FAR PTR PRINT_CHAR	
	MOV USERNAME_FLAG, 00H
	JMP SEND_PC_END
	
FIRST_JUMP_CANCEL_BARCODE:
	JMP SEND_CANCEL_BARCODE_PC
	
SEND_TRANSACTION_TO_PC:
	CMP MODIFY_ITEM_FLAG, 01H
	JE SEND_HASH_CHARACTER
	CMP ANDROID_FLAG, 01H
	JE SEND_AT_CHARACTER
	MOV AL, '['
	JMP CONTINUE_SENDING_BARCODE
SEND_HASH_CHARACTER:	
	MOV AL, '#'
	MOV CASH_REGISTER_STATE, CANCEL_ITEM
	JMP CONTINUE_SENDING_BARCODE
SEND_AT_CHARACTER:
	MOV ANDROID_FLAG, 00H
	MOV AL, '@'
CONTINUE_SENDING_BARCODE:
	CALL FAR PTR PRINT_CHAR
	XOR CX, CX
	XOR BX, BX
	MOV CL, KBD_BARCODE_LENGTH	
SEND_BARCODE:
	MOV AL, USER_BARCODE[BX]
	CALL FAR PTR PRINT_CHAR
	INC BX
	LOOP SEND_BARCODE	
	MOV AL, ';'
	CALL FAR PTR PRINT_CHAR
	XOR BX, BX
	MOV CL, USER_INPUT_LENGTH	
SEND_QUANTITY:
	MOV AL, USER_QUANTITY[BX]
	CALL FAR PTR PRINT_CHAR
	INC BX
	LOOP SEND_QUANTITY	
	MOV AL, ']'
	CALL FAR PTR PRINT_CHAR
	JMP SEND_PC_END
	
SEND_CANCEL_BARCODE_PC:	
	CMP REFUND_FLAG, 01H
	JE SEND_DOLLAR
	MOV AL, '<'
	JMP CONTINUE_SEND_CANCEL
SEND_DOLLAR:	
	MOV AL, '$'
CONTINUE_SEND_CANCEL:
	CALL FAR PTR PRINT_CHAR
	XOR CX, CX
	XOR BX, BX
	MOV CL, KBD_BARCODE_LENGTH	
SEND_ITEM_ID:
	MOV AL, USER_BARCODE[BX]
	CALL FAR PTR PRINT_CHAR
	INC BX
	LOOP SEND_ITEM_ID		
	MOV AL, '>'
	CALL FAR PTR PRINT_CHAR
	JMP SEND_PC_END

SEND_PC_END:	
	POP	CX
	POP	BX
	POP AX
	RET
SEND_TO_PC ENDP


;Procedure that will take add the necessary sound indices to the sound queue for speaker output based on a parameter
ADD_SOUND_INDEX PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX

	XOR BX, BX
	MOV BL, SOUND_TAIL
	MOV CL, SOUND_INDEX_INPUT
	MOV AL, 2
	MUL CL
	MOV SOUND_QUEUE[BX], AL
	
	INC SOUND_TAIL 
	CMP SOUND_TAIL, 32
	JL SOUND_INDEX_END
	MOV SOUND_TAIL, 00H	
	
SOUND_INDEX_END:	
	POP	CX
	POP	BX
	POP AX
	RET
ADD_SOUND_INDEX ENDP


;Procedure that will convert a price received on the serial into a format which is say-able on the speaker
POPULATE_SOUND_QUEUE PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX

	XOR BX, BX
	XOR CX, CX
	
	SUB	PLACE_VALUE, 48
	MOV CL, SERIAL_INDEX
	SUB CL, 2
	MOV SERIAL_INDEX, CL	
	
LOAD_SOUND_QUEUE:
	MOV AL, ITEM_PRICE[BX]
	CMP AL, '.'
	JE SAY_CENTS_VALUE
	JMP SAY_OTHER_VALUES
	
SAY_CENTS_VALUE:
	CMP CENTS_AND_FLAG, 00H
	JE CONTINUE_SAYING_CENTS
	MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
	CALL FAR PTR ADD_SOUND_INDEX
	
CONTINUE_SAYING_CENTS:
	INC BX
	MOV AL, ITEM_PRICE[BX]
	MOV TWO_DIGIT_SOUND[0], AL
	INC BX
	MOV AL, ITEM_PRICE[BX]
	MOV TWO_DIGIT_SOUND[1], AL
	CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
	MOV SOUND_INDEX_INPUT, SOUND_CENTS ;To say the word 'cents'
	CALL FAR PTR ADD_SOUND_INDEX 
	JMP SOUND_POPULATE_END
	
SAY_OTHER_VALUES:	
	CMP AL, '0'
	JNE CHECK_OTHER_VALUES
	CMP THOUSAND_FLAG, 01H
	JNE EXIT_FROM_PROCEDURE
	CMP PLACE_VALUE, 4
	JNE EXIT_FROM_PROCEDURE
	MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
	CALL FAR PTR ADD_SOUND_INDEX 
	MOV THOUSAND_FLAG, 00H
	
EXIT_FROM_PROCEDURE:
	JMP CONTINUE_NEXT_ITERATION
	
CHECK_OTHER_VALUES:	
	CMP PLACE_VALUE, 6
	JE PROCESS_6th_DIGIT
	
	CMP PLACE_VALUE, 5
	JE PROCESS_5th_DIGIT
	
	CMP PLACE_VALUE, 4
	JE TEMP_JUMP_4th_DIGIT
	
	CMP PLACE_VALUE, 3
	JE PROCESS_6th_DIGIT
	
	CMP PLACE_VALUE, 2
	JE PROCESS_5th_DIGIT
	
	CMP PLACE_VALUE, 1
	JE PROCESS_4th_DIGIT
	
PROCESS_6th_DIGIT:
	MOV TWO_DIGIT_SOUND[0], '0'
	MOV TWO_DIGIT_SOUND[1], AL
	CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
	MOV SOUND_INDEX_INPUT, SOUND_HUNDRED ;To say the word 'Hundred'
	CALL FAR PTR ADD_SOUND_INDEX 
	MOV AND_FLAG, 01H
	MOV THOUSAND_FLAG, 01H
	JMP CONTINUE_NEXT_ITERATION
	
TEMP_JUMP_4th_DIGIT:
	JMP PROCESS_4th_DIGIT
	
PROCESS_5th_DIGIT:
	MOV THOUSAND_FLAG, 00H
	CMP AND_FLAG, 00H
	JE CONTINUE_WITH_5th_DIGIT
	MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
	CALL FAR PTR ADD_SOUND_INDEX

CONTINUE_WITH_5th_DIGIT:
	MOV AL, ITEM_PRICE[BX]
	MOV TWO_DIGIT_SOUND[0], AL
	INC BX
	MOV AL, ITEM_PRICE[BX]
	MOV TWO_DIGIT_SOUND[1], AL
	CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
	CMP PLACE_VALUE, 3
	JLE CONTINUE_WITH_REST_OF_5th_DIGIT
	MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
	CALL FAR PTR ADD_SOUND_INDEX 
	
CONTINUE_WITH_REST_OF_5th_DIGIT:
	DEC PLACE_VALUE
	MOV AND_FLAG, 00H
	DEC CX
	JMP FIRST_JMP_ITERATION	
		
FIRST_JMP_TO_LOAD:
	JMP LOAD_SOUND_QUEUE
	
FIRST_JMP_ITERATION:
	JMP CONTINUE_NEXT_ITERATION
	
PROCESS_4th_DIGIT:
	MOV THOUSAND_FLAG, 00H
	CMP AND_FLAG, 00H
	JE CONTINUE_WITH_4th_DIGIT
	MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
	CALL FAR PTR ADD_SOUND_INDEX
	
CONTINUE_WITH_4th_DIGIT:
	MOV TWO_DIGIT_SOUND[0], '0'
	MOV AL, ITEM_PRICE[BX]
	MOV TWO_DIGIT_SOUND[1], AL
	CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
	CMP PLACE_VALUE, 3
	JLE CONTINUE_WITH_REST_OF_4th_DIGIT
	MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
	CALL FAR PTR ADD_SOUND_INDEX 
CONTINUE_WITH_REST_OF_4th_DIGIT:
	MOV AND_FLAG, 00H
	JMP CONTINUE_NEXT_ITERATION	
	
CONTINUE_NEXT_ITERATION:
	INC BX
	DEC PLACE_VALUE
	CMP PLACE_VALUE, 0
	JE SAY_DOLLARS_AFTER_PRICE
	JMP CONTINUE_AFTER_DOLLAR
	
SAY_DOLLARS_AFTER_PRICE:
	MOV CENTS_AND_FLAG, 01H
	MOV SOUND_INDEX_INPUT, SOUND_DOLLARS ;To say the word 'Dollars'
	CALL FAR PTR ADD_SOUND_INDEX 
	
CONTINUE_AFTER_DOLLAR:		
	DEC CX
	JNZ FIRST_JMP_TO_LOAD
	
SOUND_POPULATE_END:	
	MOV SERIAL_INDEX, 00H
	MOV AND_FLAG, 00H
	MOV CENTS_AND_FLAG, 00H
	POP	CX
	POP	BX
	POP AX
	RET
POPULATE_SOUND_QUEUE ENDP


;Procedure that will take in  a two digit value and add the corresponding sound indices to the sound queue
PROCESS_TWO_DIGIT_SOUND PROC FAR	
	PUSH AX
	PUSH DX

	MOV DL, TWO_DIGIT_SOUND[0]
	SUB DL, 48
	MOV DH, DL
	MOV AL, 10
	MUL DL
	MOV DL, AL
	
	MOV AL, TWO_DIGIT_SOUND[1]
	SUB AL, 48
	MOV AH, AL
	ADD AL, DL
	
	CMP AL, 20
	JG PLAY_GREATER_THAN_20
	MOV SOUND_INDEX_INPUT, AL
	CALL FAR PTR ADD_SOUND_INDEX
	
	JMP TWO_DIGIT_SOUND_END	
	
PLAY_GREATER_THAN_20:
	MOV AL, DH
	ADD AL, 18
	MOV SOUND_INDEX_INPUT, AL
	CALL FAR PTR ADD_SOUND_INDEX
	
	MOV AL, AH
	CMP AL, 0
	JE TWO_DIGIT_SOUND_END
	MOV SOUND_INDEX_INPUT, AL
	CALL FAR PTR ADD_SOUND_INDEX
	
TWO_DIGIT_SOUND_END:	
	POP DX
	POP AX
	RET
PROCESS_TWO_DIGIT_SOUND ENDP


;Procedure that will add the incoming price to the total price
ADD_INCOMING_PRICE PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV AL, TMP_PLACE_VALUE
	SUB AL, 48
	MOV PLACE_VALUE, AL	
	
	XOR CX, CX
	
	MOV AL, TOTAL_PLACE_VALUE
	CMP AL, PLACE_VALUE
	JE FIRST_JMP_ADDITION
	JL ADD_ZERO_TOTAL
	JMP ADD_ZERO_INCOMING
	
ADD_ZERO_TOTAL:
	MOV DL, PLACE_VALUE
	SUB DL, AL
	ADD TOTAL_PLACE_VALUE, DL
	MOV CL, DL
START_SHIFT_TOTAL:
	MOV AL, TOTAL_PRICE[8]
	MOV TOTAL_PRICE[9], AL
	MOV AL, TOTAL_PRICE[7]
	MOV TOTAL_PRICE[8], AL
	MOV AL, TOTAL_PRICE[6]
	MOV TOTAL_PRICE[7], AL
	MOV AL, TOTAL_PRICE[5]
	MOV TOTAL_PRICE[6], AL
	MOV AL, TOTAL_PRICE[4]
	MOV TOTAL_PRICE[5], AL
	MOV AL, TOTAL_PRICE[3]
	MOV TOTAL_PRICE[4], AL
	MOV AL, TOTAL_PRICE[2]
	MOV TOTAL_PRICE[3], AL
	MOV AL, TOTAL_PRICE[1]
	MOV TOTAL_PRICE[2], AL
	MOV AL, TOTAL_PRICE[0]
	MOV TOTAL_PRICE[1], AL
	CMP SWAP_JUMP_FLAG, 01H
	JE FIRST_CONTINUE_SWAP
	CMP SWAP_JUMP_FLAG, 02H
	JE SECOND_CONTINUE_SWAP
	MOV TOTAL_PRICE[0], '0'
	LOOP START_SHIFT_TOTAL
	JMP START_ADDITION
	
FIRST_JMP_ADDITION:
	JMP START_ADDITION
	
FIRST_CONTINUE_SWAP:
	JMP CONTINUE_FIRST_SWAP
	
SECOND_CONTINUE_SWAP:
	JMP CONTINUE_SECOND_SWAP
	
ADD_ZERO_INCOMING:
	MOV DL, PLACE_VALUE
	SUB AL, DL
	ADD PLACE_VALUE, AL
	MOV CL, AL
START_SHIFT_INCOMING:
	MOV AL, ITEM_PRICE[8]
	MOV ITEM_PRICE[9], AL
	MOV AL, ITEM_PRICE[7]
	MOV ITEM_PRICE[8], AL
	MOV AL, ITEM_PRICE[6]
	MOV ITEM_PRICE[7], AL
	MOV AL, ITEM_PRICE[5]
	MOV ITEM_PRICE[6], AL
	MOV AL, ITEM_PRICE[4]
	MOV ITEM_PRICE[5], AL
	MOV AL, ITEM_PRICE[3]
	MOV ITEM_PRICE[4], AL
	MOV AL, ITEM_PRICE[2]
	MOV ITEM_PRICE[3], AL
	MOV AL, ITEM_PRICE[1]
	MOV ITEM_PRICE[2], AL
	MOV AL, ITEM_PRICE[0]
	MOV ITEM_PRICE[1], AL
	MOV ITEM_PRICE[0], '0'
    LOOP START_SHIFT_INCOMING	
	
START_ADDITION:
	MOV CL, PLACE_VALUE
	ADD CL, 3
	MOV BL, CL
	DEC BX
	XOR DX, DX
ADD_DIGITS:
	CMP ITEM_PRICE[BX], '.'
	JE ADD_DECIMAL_POINT
	MOV AL, ITEM_PRICE[BX]
	MOV AH, TOTAL_PRICE[BX]
	SUB AH, 48
	SUB AL, 48
	ADD AH, AL
	ADD AH, DL
	CMP AH, 10
	JGE ADD_CARRY_TO_DIGIT
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	MOV DL, 00H	
	JMP END_ADD_LOOP
	
ADD_CARRY_TO_DIGIT:
	SUB AH, 10
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	MOV DL, 01H
	JMP END_ADD_LOOP
	
ADD_DECIMAL_POINT:
	MOV TOTAL_PRICE[BX], '.'
		
END_ADD_LOOP:
	DEC BX
	LOOP ADD_DIGITS
	
	CMP DL, 00H
	JE INCOMING_PRICE_END	
	MOV SWAP_JUMP_FLAG, 01H
	JMP START_SHIFT_TOTAL
CONTINUE_FIRST_SWAP:
	MOV SWAP_JUMP_FLAG, 00H
	MOV TOTAL_PRICE[0], '1'
	INC TOTAL_PLACE_VALUE

INCOMING_PRICE_END:	
	POP DX
	POP	CX
	POP	BX
	POP AX
	RET
ADD_INCOMING_PRICE ENDP


;Procedure that will subtract the total price from the amount the user wants to pay and calculate the change
CALCULATE_CHANGE PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV AL, CHANGE_PLACE_VALUE
	CMP AL, TOTAL_PLACE_VALUE
	JG START_SUBTRACTION
	JL SAY_ERROR
	
	XOR CX, CX
	XOR BX, BX
	MOV CL, TOTAL_PLACE_VALUE
	ADD CL, 3

CHECK_FOR_LESSER:
	MOV AL, TOTAL_PRICE[BX]
	CMP CHANGE_PRICE[BX], AL	
	JL SAY_ERROR
	JG START_SUBTRACTION
	INC BX
	LOOP CHECK_FOR_LESSER
	JMP START_SUBTRACTION	
	
SAY_ERROR:
	MOV CHANGE_SUCCESS_FLAG, 01H
	JMP CALCULATE_CHANGE_END	

START_SUBTRACTION:	
	XOR CX, CX
	
	MOV AL, TOTAL_PLACE_VALUE
	CMP AL, CHANGE_PLACE_VALUE
	JL SUB_ZERO_TOTAL
	JMP SUBTRACT_NUMBER
	
SUB_ZERO_TOTAL:
	MOV DL, CHANGE_PLACE_VALUE
	SUB DL, AL
	ADD TOTAL_PLACE_VALUE, DL
	MOV CL, DL
SUB_START_SHIFT_TOTAL:
	MOV SWAP_JUMP_FLAG, 02H
	JMP START_SHIFT_TOTAL
CONTINUE_SECOND_SWAP:
	MOV SWAP_JUMP_FLAG, 00H
	MOV TOTAL_PRICE[0], '0'
	LOOP SUB_START_SHIFT_TOTAL
	
SUBTRACT_NUMBER:
	MOV CL, TOTAL_PLACE_VALUE
	ADD CL, 3
	MOV BL, CL
	DEC BX
	XOR DX, DX
SUBTRACT_DIGITS:
	CMP TOTAL_PRICE[BX], '.'
	JE ADD_DECIMAL_POINT_SUB
	MOV AL, TOTAL_PRICE[BX]
	MOV AH, CHANGE_PRICE[BX]
	SUB AH, 48
	SUB AL, 48
	CMP AH, AL
	JL BORROW_SUBTRACT
	JG NORMAL_SUBTRACT

EQUAL_SUBTRACT:	
	SUB AH, AL
	SUB AH, DL
	CMP AH, 0
	JL LESSER_SUBTRACT
	
	MOV DL, 0
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	JMP END_SUB_LOOP
	
LESSER_SUBTRACT:
	ADD AH, 10
	MOV DL, 1
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	JMP END_SUB_LOOP
	
NORMAL_SUBTRACT:
	SUB AH, AL
	SUB AH, DL
	MOV DL, 0
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	JMP END_SUB_LOOP
	
BORROW_SUBTRACT:
	SUB AH, AL
	SUB AH, DL
	ADD AH, 10
	MOV DL, 1
	ADD AH, 48
	MOV TOTAL_PRICE[BX], AH
	JMP END_SUB_LOOP
	
ADD_DECIMAL_POINT_SUB:
	MOV TOTAL_PRICE[BX], '.'
		
END_SUB_LOOP:
	DEC BX
	LOOP SUBTRACT_DIGITS
	
REMOVE_SUB_ZERO:
	CMP TOTAL_PRICE[0], '0'
	JNE CALCULATE_CHANGE_END
	MOV AL, TOTAL_PRICE[1]
	MOV TOTAL_PRICE[0], AL
	MOV AL, TOTAL_PRICE[2]
	MOV TOTAL_PRICE[1], AL
	MOV AL, TOTAL_PRICE[3]
	MOV TOTAL_PRICE[2], AL
	MOV AL, TOTAL_PRICE[4]
	MOV TOTAL_PRICE[3], AL
	MOV AL, TOTAL_PRICE[5]
	MOV TOTAL_PRICE[4], AL
	MOV AL, TOTAL_PRICE[6]
	MOV TOTAL_PRICE[5], AL
	MOV AL, TOTAL_PRICE[7]
	MOV TOTAL_PRICE[6], AL
	MOV AL, TOTAL_PRICE[8]
	MOV TOTAL_PRICE[7], AL
	MOV AL, TOTAL_PRICE[9]
	MOV TOTAL_PRICE[8], AL
	MOV TOTAL_PRICE[9], '0'
	DEC TOTAL_PLACE_VALUE
	JMP REMOVE_SUB_ZERO
	
CALCULATE_CHANGE_END:	
	POP DX
	POP	CX
	POP	BX
	POP AX
	RET
CALCULATE_CHANGE ENDP


;Procedure that is called whenever a timer interrupt is received
TIMER2_ACTION	PROC	FAR
	INC DS:TIMER_COUNTER_BCD
    INC DS:TIMER_COUNTER_KBD

    CMP DS:TIMER_COUNTER_KBD, TIMER_COUNTER_KBD_LEN
    JE EXECUTE_KBD
	
    CMP DS:TIMER_COUNTER_BCD, TIMER_COUNTER_BCD_LEN
    JE EXECUTE_BCD
	
EXECUTE_SOUND:
	CALL FAR PTR PLAY_SOUND
	JMP T2_END

EXECUTE_BCD:
	MOV DS:TIMER_COUNTER_BCD, 0
	CALL FAR PTR DISPLAY_7SEGMENT
	JMP T2_END
	
EXECUTE_KBD:
	CALL FAR PTR PLAY_SOUND
	CALL FAR PTR PLAY_SOUND
	MOV DS:TIMER_COUNTER_KBD, 0
	CALL FAR PTR KEYPAD_READ
	CALL FAR PTR PLAY_SOUND
	CALL FAR PTR PLAY_SOUND
	
T2_END:
	RET
TIMER2_ACTION	ENDP


;Procedure that will reset the 7-segment displays back to zeroes
CLEAR_7SEGMENT PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX

	XOR BX, BX
	MOV CX, 06
	
CLEAR_SINGLE_BCD:
	CMP TRIGGER_L_FLAG, 01H
	JE ASSIGN_BCD_VALUE_TO_L
	
	CMP TRIGGER_E_FLAG, 01H
	JE ASSIGN_BCD_VALUE_TO_E
	
	CMP TRIGGER_A_FLAG, 01H
	JE ASSIGN_BCD_VALUE_TO_A
	
	CMP TRIGGER_P_FLAG, 01H
	JE ASSIGN_BCD_VALUE_TO_P
	
	MOV AL, BCD_NUMBERS[0]
	JMP ASSIGN_TO_BCD
	
ASSIGN_BCD_VALUE_TO_L:
	MOV AL, BCD_NUMBERS[10]
	JMP ASSIGN_TO_BCD
	
ASSIGN_BCD_VALUE_TO_E:
	MOV AL, BCD_NUMBERS[11]
	JMP ASSIGN_TO_BCD
	
ASSIGN_BCD_VALUE_TO_A:
	MOV AL, BCD_NUMBERS[12]
	JMP ASSIGN_TO_BCD
	
ASSIGN_BCD_VALUE_TO_P:
	MOV AL, BCD_NUMBERS[13]	
	JMP ASSIGN_TO_BCD
	
ASSIGN_TO_BCD:
	MOV DS:BCD_DISPLAY[BX], AL
	INC BX
	LOOP CLEAR_SINGLE_BCD
	
	MOV TRIGGER_L_FLAG, 00H
	MOV TRIGGER_E_FLAG, 00H
	MOV TRIGGER_A_FLAG, 00H
	MOV TRIGGER_P_FLAG, 00H

	POP CX
	POP BX
	POP AX
	RET
CLEAR_7SEGMENT ENDP


;Procedure that will display digits on the BCD based on the BCD queue
DISPLAY_7SEGMENT PROC FAR	
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	XOR BX, BX
	
	; BCD Select: [-] [-] [6] [5] [4] [3] [2] [1]
	MOV DX, PCS2_ADDR
	MOV AL, 0FEH
	MOV CL, DS:CURRENT_BCD
	ROL AL, CL
	OUT DX, AL
	
	MOV DX, PCS3_ADDR
	MOV BL, CURRENT_BCD
	MOV AL, BCD_DISPLAY[BX]
	OUT DX, AL
	
	INC CURRENT_BCD
	CMP CURRENT_BCD, 06H
	JE RESET_CURRENT_BCD
	JMP DISP_END
	
RESET_CURRENT_BCD:
	MOV CURRENT_BCD, 00H

DISP_END:	
	POP DX
	POP	CX
	POP	BX
	POP AX
	RET
DISPLAY_7SEGMENT ENDP


;Procedure that will play sounds on the speaker based on the speaker queue
PLAY_SOUND PROC FAR	
	PUSH AX
	PUSH BX
	PUSH SI
	PUSH DX
	
	MOV AX, DATA_SEG
    MOV DS, AX
	
	MOV AL, SOUND_HEAD
	CMP SOUND_TAIL, AL
	JE SOUND_END
	
	XOR BX, BX
	MOV BL, SOUND_HEAD 
	MOV BL, SOUND_QUEUE[BX]
	MOV AX, SOUND_SIZE[BX]
	
	CMP SOUND_COUNT, 0000H
	JE ASSIGN_ADDRESS
	CMP SOUND_COUNT, AX
	JLE SOUND_PLAY
	
	INC SOUND_HEAD
	CMP SOUND_HEAD, 32
	JL SOUND_INITIALIZE_CONTINUE
	MOV SOUND_HEAD, 00H

SOUND_INITIALIZE_CONTINUE:
	MOV SOUND_COUNT, 0000H
	MOV AL, SOUND_HEAD
	CMP SOUND_TAIL, AL
	JE SOUND_END
	
	XOR BX, BX
	MOV BL, SOUND_HEAD
	MOV BL, SOUND_QUEUE[BX]
	MOV AX, SOUND_OFFSET[BX]
	MOV SOUND_ADDRESS, AX
	JMP SOUND_PLAY
	
ASSIGN_ADDRESS:
	MOV AX, SOUND_OFFSET[BX]
	MOV SOUND_ADDRESS, AX
	
SOUND_PLAY:				
	MOV SI, SOUND_ADDRESS
	MOV AX, EEPROM_START[BX]
	MOV DS, AX
	
	MOV AL, [SI]
	MOV DX, PCS4_ADDR
	OUT DX, AL
		
	MOV AX, DATA_SEG
    MOV DS, AX
	
	INC SOUND_COUNT
	INC SOUND_ADDRESS

SOUND_END:	
	POP DX
	POP	SI
	POP	BX
	POP AX
	RET
PLAY_SOUND ENDP


CODE_SEG	ENDS
END