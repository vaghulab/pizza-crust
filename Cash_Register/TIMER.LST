8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE TIMER
OBJECT MODULE PLACED IN TIMER.OBJ
ASSEMBLER INVOKED BY:  F:\ASM86.EXE TIMER.ASM


LOC  OBJ                  LINE     SOURCE

                             1 +1  $MOD186
                             2 +1  $EP
                             3     NAME TIMER
                             4     
                             5     ; =========================================================================
                             6     ; Main Timer Driver Program
                             7     ; Author: Vaghul Aditya Balaji
                             8     
                             9     ; This file contains proprietary information and cannot be copied 
                            10     ; or distributed without prior permission from the author.
                            11     ; =========================================================================
                            12     
                            13     public  serial_rec_action, timer2_action
                            14     extrn   print_char:far, print_2hex:far, iodefine:far
                            15     extrn   set_timer2:far
                            16     
                            17     ;IO Setup for 80C188
  FFA0                      18             UMCR    EQU    0FFA0H ; Upper Memory Control Register
  FFA2                      19             LMCR    EQU    0FFA2H ; Lower Memory control Register         
  FFA4                      20             PCSBA   EQU    0FFA4H ; Peripheral Chip Select Base Address
  FFA6                      21             MMCS    EQU    0FFA6H ; Used for controlling the MCS pins on the 8088
  FFA8                      22             MPCS    EQU    0FFA8H ; MMCS and PCS Alter Control Register
                            23             
  0080                      24             PORTA  EQU    0080H
  0081                      25             PORTB  EQU    0081H
  0082                      26             PORTC  EQU    0082H
  0083                      27             CWR    EQU    0083H
                            28             
  FF38                      29             INT0CON  EQU   0FF38H
  FF22                      30             EOI      EQU   0FF22H
  FF28                      31             IMASK    EQU   0FF28H
                            32             
  0100                      33             PCS2_ADDR EQU 100H ; Used for controlling which BCD displays the digit
  0180                      34             PCS3_ADDR EQU 180H ; Used for controlling the pattern that is displayed on th
                                   e BCDs
  0200                      35             PCS4_ADDR EQU 200H ; Used for controlling the DAC chip of the speaker system
                            36             
  0018                      37             TIMER_COUNTER_BCD_LEN   EQU 24
  0030                      38             TIMER_COUNTER_KBD_LEN   EQU 48
  0604                      39             TIMEOUT_COUNTER_LEN             EQU 1540
                            40             
                            41             ;Sound Mappings for playing on the speaker
  002C                      42             SOUND_SILENCE                    EQU  44
  001E                      43             SOUND_AND                        EQU  30
  0021                      44             SOUND_DOLLARS                    EQU  33
  0022                      45             SOUND_CENTS                      EQU  34
  001C                      46             SOUND_HUNDRED                    EQU  28
  001D                      47             SOUND_THOUSAND                   EQU  29
  0023                      48             SOUND_GOOD                       EQU  35
  0025                      49             SOUND_AFTERNOON                  EQU  37
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0028                      50             SOUND_PURCHASED                  EQU  40
  001F                      51             SOUND_COST                               EQU  31
  0029                      52             SOUND_YOURCHANGEIS               EQU  41
  002A                      53             SOUND_THANKYOUANDGOODBYE EQU  42        
                            54             
                            55             ;Serial Communication Mappings
  0000                      56             NETWORK_DISABLE             EQU  00
  0001                      57             NETWORK_ENABLE              EQU  01     
  0002                      58             NETWORK_END_TRANSACTION     EQU  02
  0003                      59             NETWORK_LOGOUT                      EQU  03
  0004                      60             NETWORK_CANCEL_TRANSACTION  EQU  04
                            61             
                            62             ;Cash Register State Mappings
  0000                      63             WAITING_FOR_LOGIN     EQU  00
  0001                      64             ENTER_LOGIN_USERNAME  EQU  01
  0002                      65             WAITING_FOR_BARCODE   EQU  02
  0003                      66             ENTER_BARCODE         EQU  03
  0004                      67             ENTER_QUANTITY        EQU  04
  0005                      68             DISPLAY_ITEM_PRICE    EQU  05
  0006                      69             CANCEL_ITEM                   EQU  06
  0007                      70             END_TRANSACTION           EQU  07
  0008                      71             CHANGE_PAY                        EQU  08
                            72             
                            73             ;Keypad Character Mappings
  0000                      74             KBD_CHAR_RESET                 EQU  00
  005F                      75             KBD_BACKSPACE                  EQU  '_'
  007C                      76             KBD_ENTER                      EQU  '|'
  0041                      77             KBD_TRIGGER_LOGIN              EQU  'A'
  0042                      78             KBD_TRIGGER_TRANSACTION        EQU  'B'
  0043                      79             KBD_TRIGGER_NEW_ITEM               EQU  'C'
  0044                      80             KBD_TRIGGER_CANCEL_ITEM            EQU  'D'
  0045                      81             KBD_TRIGGER_CANCEL_TRANSACTION EQU  'E'
  0046                      82             KBD_TRIGGER_END_TRANSACTION    EQU  'F'
  0047                      83             KBD_TRIGGER_MODIFY                         EQU  'G'
  0048                      84             KBD_TRIGGER_DISPLAY_CURRENT    EQU  'H'
  0049                      85             KBD_TRIGGER_CHANGE_PAY         EQU  'I'
  004B                      86             KBD_TRIGGER_REFUND                         EQU  'K'
                            87             
                            88             ;Keyboard Input Constants
  0006                      89             KBD_USERNAME_LENGTH  EQU  06
  0008                      90             KBD_BARCODE_LENGTH   EQU  08
  0003                      91             KBD_QUANTITY_LENGTH  EQU  03
  0008                      92             KBD_CHANGE_LENGTH    EQU  08
  0000                      93             KBD_OLD_INPUT        EQU  00
  0001                      94             KBD_NEW_INPUT        EQU  01
                            95     
                            96             
----                        97     STACK_SEG       SEGMENT
0000 (256                   98             DB      256 DUP(?)
     ??
     )
0100                        99             TOS     LABEL   WORD
----                       100     STACK_SEG       ENDS
                           101     
                           102     
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

----                       103     DATA_SEG        SEGMENT
0000 0A                    104             TIMER2_MESS           DB        10,13,'TIMER2 INTERRUPT    '
0001 0D
0002 54494D45523220
     494E5445525255
     505420202020
0016 2F                    105             T_COUNT               DB        2FH
0017 2F                    106             T_COUNT_SET           DB        2FH
0018 0A                    107             REC_MESS              DB        10,13,'Period of timer =     '
0019 0D
001A 506572696F6420
     6F662074696D65
     72203D20202020
     20
0030 43323237315D          108             CASH_REGISTER_ID  DB    'C2271]'
                           109             
                           110             ;Keypad Variables       
0036 7C                    111             KEYS_PART1           DB   '|','0','_','L','K','J','9','8','7','I','H','G' 
0037 30
0038 5F
0039 4C
003A 4B
003B 4A
003C 39
003D 38
003E 37
003F 49
0040 48
0041 47
0042 36                    112             KEYS_PART2           DB   '6','5','4','F','E','D','3','2','1','C','B','A'
0043 35
0044 34
0045 46
0046 45
0047 44
0048 33
0049 32
004A 31
004B 43
004C 42
004D 41
004E 00                    113             KEY_FLAG             DB   00H ;This variable is used for controlling multiple
                                    detections of the same key-press inside the keypad loop
004F 00                    114             KBD_NUM_INPUT        DB   00H ;This variable stores the numerical input from 
                                   the keyboard
0050 00                    115             KBD_CHAR_INPUT       DB   00H ;This variable stores the character input from 
                                   the keyboard
0051 00                    116             KBD_INPUT_STATE      DB   00H
0052 00                    117             CHANGE_PLACE_VALUE   DB   00H
0053 (10                   118             CHANGE_PRICE         DB   10 DUP('0')
     30
     )
005D (6                    119             USER_USERNAME        DB   6 DUP('0')
     30
     )
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

0063 (6                    120             USER_PASSWORD        DB   6 DUP('0')
     30
     )
0069 (8                    121             USER_BARCODE         DB   8 DUP('0')
     30
     )
0071 (3                    122             USER_QUANTITY        DB   3 DUP('0')
     30
     )
0074 00                    123             USER_INPUT_LENGTH    DB   00H   
0075 00                    124             CHANGE_SUCCESS_FLAG  DB  00H
                           125             
                           126             ;Sound Variables
0076 0000                  127             SOUND_OFFSET   DW   0000H, 1269H, 2121H, 2EA9H, 3BD3H, 478DH, 546EH, 6608H, 7
                                   53DH, 7C41H
0078 6912
007A 2121
007C A92E
007E D33B
0080 8D47
0082 6E54
0084 0866
0086 3D75
0088 417C
008A 0B8D                  128                                        DW   8D0BH, 98C6H, 0AAF8H, 0BA1EH, 0CA87H, 0DB3CH,
                                    9D67H, 055BH, 1E09H, 32B8H
008C C698
008E F8AA
0090 1EBA
0092 87CA
0094 3CDB
0096 679D
0098 5B05
009A 091E
009C B832
009E 554A                  129                                        DW   4A55H, 567AH, 60D6H, 6E3CH, 7A8BH, 8BFAH, 9E5
                                   BH, 0AA63H, 0B8D6H, 0C3F7H
00A0 7A56
00A2 D660
00A4 3C6E
00A6 8B7A
00A8 FA8B
00AA 5B9E
00AC 63AA
00AE D6B8
00B0 F7C3
00B2 67CF                  130                                        DW   0CF67H, 0D6EAH, 0E31DH, 0F49EH, 06C9H, 13A6H,
                                    1C5FH, 29DAH, 408FH, 5293H
00B4 EAD6
00B6 1DE3
00B8 9EF4
00BA C906
00BC A613
00BE 5F1C
00C0 DA29
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

00C2 8F40
00C4 9352
00C6 3466                  131                                        DW   6634H, 83C7H, 0A00BH, 0C7B2H, 0CAD7H
00C8 C783
00CA 0BA0
00CC B2C7
00CE D7CA
                           132                                
00D0 6812                  133             SOUND_SIZE         DW   1268H, 0EB7H, 0D87H, 0D29H, 0BB9H, 0CE0H, 1199H, 0F34
                                   H, 0703H, 10C9H
00D2 B70E
00D4 870D
00D6 290D
00D8 B90B
00DA E00C
00DC 9911
00DE 340F
00E0 0307
00E2 C910
00E4 BA0B                  134                                        DW   0BBAH, 1231H, 0F25H, 1068H, 10B4H, 122AH, 175
                                   3H, 18ADH, 14AEH, 179CH
00E6 3112
00E8 250F
00EA 6810
00EC B410
00EE 2A12
00F0 5317
00F2 AD18
00F4 AE14
00F6 9C17
00F8 240C                  135                                        DW   0C24H, 0A5BH, 0D65H, 0C4EH, 116EH, 1260H, 0C0
                                   7H, 0E72H, 0B20H, 0B6FH
00FA 5B0A
00FC 650D
00FE 4E0C
0100 6E11
0102 6012
0104 070C
0106 720E
0108 200B
010A 6F0B
010C 8207                  136                                        DW   0782H, 0C32H, 1180H, 122AH, 0CDCH, 08B8H, 0D7
                                   AH, 16B4H, 1203H, 13A0H
010E 320C
0110 8011
0112 2A12
0114 DC0C
0116 B808
0118 7A0D
011A B416
011C 0312
011E A013
0120 921D                  137                                        DW   1D92H, 1C43H, 27A6H, 0324H, 031FH       
                                                         
0122 431C
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

0124 A627
0126 2403
0128 1F03
                           138     
012A 0040                  139             EEPROM_START   DW   4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 4
                                   000H, 4000H
012C 0040
012E 0040
0130 0040
0132 0040
0134 0040
0136 0040
0138 0040
013A 0040
013C 0040
013E 0040                  140                                        DW   4000H, 4000H, 4000H, 4000H, 4000H, 4000H, 450
                                   0H, 5000H, 5000H, 5000H
0140 0040
0142 0040
0144 0040
0146 0040
0148 0040
014A 0045
014C 0050
014E 0050
0150 0050
0152 0050                  141                                        DW   5000H, 5000H, 5000H, 5000H, 5000H, 5000H, 500
                                   0H, 5000H, 5000H, 5000H 
0154 0050
0156 0050
0158 0050
015A 0050
015C 0050
015E 0050
0160 0050
0162 0050
0164 0050
0166 0050                  142                                        DW   5000H, 5000H, 5000H, 5000H, 6000H, 6000H, 600
                                   0H, 6000H, 6000H, 6000H
0168 0050
016A 0050
016C 0050
016E 0060
0170 0060
0172 0060
0174 0060
0176 0060
0178 0060
017A 0060                  143                                        DW   6000H, 6000H, 6000H, 6000H, 6000H       
                                                         
017C 0060
017E 0060
0180 0060
0182 0060
                           144                                        
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

0184 0000                  145             SOUND_ADDRESS        DW   0000H
0186 0000                  146             SOUND_COUNT          DW   0000H
0188 (32                   147             SOUND_QUEUE          DB   32 DUP(?)
     ??
     )
01A8 00                    148             SOUND_HEAD           DB   00H
01A9 00                    149             SOUND_TAIL           DB   00H
01AA 00                    150             SOUND_INDEX_INPUT    DB   00H
01AB 00                    151             SAY_SOUND_ONCE_FLAG  DB   00H
                           152             
                           153             ;7-Segment Variables
                           154             ; BCD Digit Mapping:    0        1        2        3    4    5    6    7    8
                                       9    L     E    A    P
01AC 5F                    155         BCD_NUMBERS        DB  5FH, 50H, 6DH, 79H, 72H, 3BH, 3EH, 51H, 7FH, 73H, 0EH, 02F
                                   H, 77H, 67H                                                
01AD 50
01AE 6D
01AF 79
01B0 72
01B1 3B
01B2 3E
01B3 51
01B4 7F
01B5 73
01B6 0E
01B7 2F
01B8 77
01B9 67
01BA 0E                    156             BCD_DISPLAY            DB  0EH, 0EH, 0EH, 0EH, 0EH, 0EH
01BB 0E
01BC 0E
01BD 0E
01BE 0E
01BF 0E
01C0 00                    157             CURRENT_BCD        DB  00H
01C1 00                    158             TRIGGER_L_FLAG     DB  00H 
01C2 00                    159             TRIGGER_E_FLAG     DB  00H 
01C3 00                    160             TRIGGER_A_FLAG     DB  00H 
01C4 00                    161             TRIGGER_P_FLAG     DB  00H 
01C5 00                    162             SHOW_BCD_ONCE_FLAG DB  00H
                           163             
                           164             ;Timer Variables
01C6 00                    165             TIMER_COUNTER_BCD   DB  00H
01C7 0000                  166         TIMER_COUNTER_KBD   DW  0000H
01C9 0000                  167             TIMEOUT_COUNTER         DW  0000H
01CB 00                    168             TIMEOUT_SEC_COUNT   DB  00H
                           169             
                           170             ;Serial Variables
01CC 00                    171             START_READ            DB  00H
01CD 00                    172             START_RECEIVE_PRICE   DB  00H
01CE 00                    173             SERIAL_INDEX          DB  00H
01CF (10                   174             ITEM_PRICE            DB  10 DUP('0')
     30
     )
01D9 00                    175             PLACE_VALUE           DB  00H
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    8


LOC  OBJ                  LINE     SOURCE

01DA 00                    176             TMP_PLACE_VALUE       DB  00H
01DB (2                    177             TWO_DIGIT_SOUND       DB  2 DUP(?)
     ??
     )
01DD 00                    178             AND_FLAG              DB  00H
01DE 00                    179             CENTS_AND_FLAG        DB  00H
01DF 00                    180             THOUSAND_FLAG         DB  00H
01E0 (10                   181             TOTAL_PRICE           DB  10 DUP('0')
     30
     )
01EA 00                    182             TOTAL_PLACE_VALUE     DB  00H
01EB 00                    183             CASH_REGISTER_START   DB  00H
01EC 00                    184             CASH_REGISTER_FLAG    DB  00H
01ED 00                    185             NETWORK_STATE         DB  00H
01EE 00                    186             CASH_REGISTER_STATE   DB  WAITING_FOR_LOGIN
01EF 00                    187             PURCHASE_ITEM_COUNT   DB  00H
01F0 00                    188             CHANGE_DONE_FLAG      DB  00H
01F1 00                    189             SWAP_JUMP_FLAG            DB  00H
01F2 00                    190             MODIFY_ITEM_FLAG      DB  00H
01F3 00                    191             USERNAME_FLAG             DB  00H
01F4 00                    192             REFUND_FLAG                       DB  00H
----                       193     DATA_SEG        ENDS
                           194     
                           195             
----                       196     CODE_SEG        SEGMENT
                           197     
                           198             PUBLIC          START
                           199     
                           200     ASSUME  CS:CODE_SEG, SS:STACK_SEG, DS:DATA_SEG
                           201     
0000                       202     START:
                           203     ;initialize stack area
0000 B8----         R      204             MOV     AX,STACK_SEG            
0003 8ED0                  205             MOV     SS,AX
0005 368B260001            206             MOV     SP,TOS
                           207                     
000A B8----         R      208             MOV AX, DATA_SEG
000D 8ED8                  209             MOV DS, AX
                           210     
                           211     ; Initialize the on-chip peripherals
000F 9A0000----     E      212             CALL FAR PTR IODEFINE
                           213             
                           214     ; Initialize MPCS to MAP peripheral to IO address
                           215             
0014 BAA8FF                216             MOV  DX, MPCS  
0017 B88320                217             MOV  AX, 2083H 
001A EF                    218             OUT  DX, AX
                           219             
001B BAA6FF                220             MOV  DX, MMCS ; send MCS start address to 40000
001E B80340                221             MOV  AX, 4003H 
0021 EF                    222             OUT  DX, AX
                           223     
                           224     ; PCSBA initial, set the parallel port start from 00H
0022 BAA4FF                225             MOV DX, PCSBA
0025 B80300                226             MOV AX, 0003H ; Peripheral starting address 00H no READY, No Waits
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE    9


LOC  OBJ                  LINE     SOURCE

0028 EF                    227             OUT DX, AX
                           228     
                           229     ; Initialize LMCS 
0029 BAA2FF                230         MOV DX, LMCR
002C B8C401                231         MOV AX, 01C4H  ; Starting address 1FFFH, 8K, No waits, last should be 5H for 1 wa
                                   its      
002F EF                    232         OUT DX, AX
                           233             
0030 B089                  234             MOV AL, 89H ;mode 0, [A-out(for led)] [B - out, C-in (for reading keypad))]
0032 BA8300                235             MOV DX, CWR ; load CWR to DX
0035 EE                    236             OUT DX, AL      ;load CWR value from AL
                           237             
                           238     ; ######################### Start of User Main Routine ###########################
                           239       
0036 9A0000----     E      240         CALL FAR PTR set_timer2
003B FB                    241         STI
                           242                     
003C                       243             NEXT:
003C EBFE                  244                     JMP NEXT
                           245             
                           246     ; ######################### End of User Main Routine #############################
                                      
                           247     
                           248     
                           249     ;Procedure to change the state of the cash register according to user's input
003E                       250     CHANGE_CASHIER_STATE PROC FAR   
003E 50                    251             PUSH AX
003F 53                    252             PUSH BX
0040 51                    253             PUSH CX
                           254     
0041 803EEE0100            255             CMP CASH_REGISTER_STATE, WAITING_FOR_LOGIN
0046 743B                  256             JE CASHIER_WAITING_FOR_LOGIN
                           257             
0048 803EEE0101            258             CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
004D 7448                  259             JE CASHIER_ENTER_USERNAME       
                           260             
004F 803EEE0102            261             CMP CASH_REGISTER_STATE, WAITING_FOR_BARCODE
0054 7469                  262             JE FIRST_JUMP_WAITING_FOR_BARCODE
                           263             
0056 803EEE0103            264             CMP CASH_REGISTER_STATE, ENTER_BARCODE
005B 7465                  265             JE FIRST_JUMP_ENTER_BARCODE
                           266             
005D 803EEE0104            267             CMP CASH_REGISTER_STATE, ENTER_QUANTITY
0062 7461                  268             JE FIRST_JUMP_ENTER_QUANTITY
                           269             
0064 803EEE0105            270             CMP CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
0069 745D                  271             JE FIRST_JUMP_DISPLAY_ITEM_PRICE
                           272             
006B 803EEE0106            273             CMP CASH_REGISTER_STATE, CANCEL_ITEM
0070 7459                  274             JE FIRST_JUMP_CANCEL_ITEM
                           275             
0072 803EEE0108            276             CMP CASH_REGISTER_STATE, CHANGE_PAY
0077 7458                  277             JE FIRST_JUMP_CHANGE_PAY
                           278             
0079 803EEE0107            279             CMP CASH_REGISTER_STATE, END_TRANSACTION
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   10


LOC  OBJ                  LINE     SOURCE

007E 744E                  280             JE FIRST_JUMP_END_TRANSACTION
                           281     
0080 EB3A90                282             JMP FIRST_JUMP_STATE_END
                           283     
                           284     ;Waiting for user to press the login button     
0083                       285     CASHIER_WAITING_FOR_LOGIN:
0083 803E500041            286             CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
0088 7532                  287             JNE FIRST_JUMP_STATE_END
008A C606EE0101            288             MOV CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
008F 9A0E06----     R      289             CALL FAR PTR STATE_TRANSITION
0094 EB2690                290             JMP FIRST_JUMP_STATE_END
                           291             
                           292     ;User is now entering his/her login credentials
0097                       293     CASHIER_ENTER_USERNAME:
0097 803E500000            294             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
009C 7477                  295             JE USERNAME_CHECK_NUMBER
009E 803E500041            296             CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
00A3 752F                  297             JNE USERNAME_CHECK_BACKSPACE
00A5 C606C10101            298             MOV TRIGGER_L_FLAG, 01H
00AA C606EE0100            299             MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
00AF C606F30100            300             MOV USERNAME_FLAG, 00H
00B4 9A0E06----     R      301             CALL FAR PTR STATE_TRANSITION
00B9 E98004                302             JMP CASHIER_STATE_END   
00BC                       303     FIRST_JUMP_STATE_END:
00BC E97D04                304             JMP CASHIER_STATE_END
00BF                       305     FIRST_JUMP_WAITING_FOR_BARCODE:
00BF EB6390                306             JMP CASHIER_WAITING_FOR_BARCODE
00C2                       307     FIRST_JUMP_ENTER_BARCODE:
00C2 E9B500                308             JMP CASHIER_ENTER_BARCODE
00C5                       309     FIRST_JUMP_ENTER_QUANTITY:
00C5 E94A01                310             JMP CASHIER_ENTER_QUANTITY
00C8                       311     FIRST_JUMP_DISPLAY_ITEM_PRICE:
00C8 E9AF01                312             JMP CASHIER_DISPLAY_ITEM_PRICE
00CB                       313     FIRST_JUMP_CANCEL_ITEM:
00CB E9FF02                314             JMP CASHIER_CANCEL_ITEM
00CE                       315     FIRST_JUMP_END_TRANSACTION:
00CE E95C03                316             JMP CASHIER_END_TRANSACTION
00D1                       317     FIRST_JUMP_CHANGE_PAY:
00D1 E98103                318             JMP CASHIER_CHANGE_PAY
00D4                       319     USERNAME_CHECK_BACKSPACE:
00D4 803E50005F            320             CMP KBD_CHAR_INPUT, KBD_BACKSPACE
00D9 7508                  321             JNE USERNAME_CHECK_ENTER
00DB 9A2306----     R      322             CALL FAR PTR BACKSPACE_KEYPRESS
00E0 E95904                323             JMP CASHIER_STATE_END
00E3                       324     USERNAME_CHECK_ENTER:
00E3 803E50007C            325             CMP KBD_CHAR_INPUT, KBD_ENTER
00E8 752B                  326             JNE USERNAME_CHECK_NUMBER
00EA 803E740006            327             CMP USER_INPUT_LENGTH, KBD_USERNAME_LENGTH
00EF 75CB                  328             JNE FIRST_JUMP_STATE_END
00F1 803EF30101            329             CMP USERNAME_FLAG, 01H
00F6 750C                  330             JNE CONTINUE_TO_PASSWORD
00F8 C606ED0101            331             MOV NETWORK_STATE, NETWORK_ENABLE
00FD 9A0E06----     R      332             CALL FAR PTR STATE_TRANSITION
0102 EBB8                  333             JMP FIRST_JUMP_STATE_END
0104                       334     CONTINUE_TO_PASSWORD:
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   11


LOC  OBJ                  LINE     SOURCE

0104 C606F30101            335             MOV USERNAME_FLAG, 01H
0109 C606EE0101            336             MOV CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
010E 9A0E06----     R      337             CALL FAR PTR STATE_TRANSITION
0113 EBA7                  338             JMP FIRST_JUMP_STATE_END
0115                       339     USERNAME_CHECK_NUMBER:  
0115 803E740006            340             CMP USER_INPUT_LENGTH, KBD_USERNAME_LENGTH
011A 74A0                  341             JE FIRST_JUMP_STATE_END
011C 9A4A05----     R      342             CALL FAR PTR GET_USER_DIGIT
0121                       343     SECOND_JUMP_STATE_END:
0121 E91804                344             JMP CASHIER_STATE_END   
                           345             
                           346     ;Waiting for the user to begin a new transaction
0124                       347     CASHIER_WAITING_FOR_BARCODE:
0124 803E500000            348             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
0129 74F6                  349             JE SECOND_JUMP_STATE_END
012B 803E500041            350             CMP KBD_CHAR_INPUT, KBD_TRIGGER_LOGIN
0130 7517                  351             JNE BARCODE_CHECK_TRANSACTION
0132 C606C10101            352             MOV TRIGGER_L_FLAG, 01H
0137 C606EE0100            353             MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
013C C606ED0103            354             MOV NETWORK_STATE, NETWORK_LOGOUT
0141 9A0E06----     R      355             CALL FAR PTR STATE_TRANSITION
0146 E9F303                356             JMP CASHIER_STATE_END   
0149                       357     BARCODE_CHECK_TRANSACTION:
0149 803E500042            358             CMP KBD_CHAR_INPUT, KBD_TRIGGER_TRANSACTION
014E 7512                  359             JNE BARCODE_REFUND
0150 C606EE0103            360             MOV CASH_REGISTER_STATE, ENTER_BARCODE
0155 9A0E06----     R      361             CALL FAR PTR STATE_TRANSITION
015A 9AB105----     R      362             CALL FAR PTR CLEAR_ALL_VARIABLES
015F E9DA03                363             JMP CASHIER_STATE_END
0162                       364     BARCODE_REFUND:
0162 803E50004B            365             CMP KBD_CHAR_INPUT, KBD_TRIGGER_REFUND
0167 75B8                  366             JNE SECOND_JUMP_STATE_END
0169 C606F40101            367             MOV REFUND_FLAG, 01H
016E C606EE0103            368             MOV CASH_REGISTER_STATE, ENTER_BARCODE
0173 9A0E06----     R      369             CALL FAR PTR STATE_TRANSITION
0178 EBA7                  370             JMP SECOND_JUMP_STATE_END
                           371             
                           372     ;User is now entering the barcode
017A                       373     CASHIER_ENTER_BARCODE:
017A 803E500000            374             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
017F 7450                  375             JE FIRST_JMP_BARCODE_CHECK_NUMBER
0181 803E50005F            376             CMP KBD_CHAR_INPUT, KBD_BACKSPACE
0186 7508                  377             JNE BARCODE_CANCEL_ITEM
0188 9A2306----     R      378             CALL FAR PTR BACKSPACE_KEYPRESS
018D E9AC03                379             JMP CASHIER_STATE_END
0190                       380     BARCODE_CANCEL_ITEM:
0190 803E500044            381             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
0195 753D                  382             JNE BARCODE_CHECK_ENTER
0197 803EF40101            383             CMP REFUND_FLAG, 01H
019C 7517                  384             JNE NORMAL_CANCEL_BARCODE
019E C606EE0102            385             MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
01A3 C606F40100            386             MOV REFUND_FLAG, 00H
01A8 C606C40101            387             MOV TRIGGER_P_FLAG, 01H
01AD 9A0E06----     R      388             CALL FAR PTR STATE_TRANSITION
01B2 E98703                389             JMP CASHIER_STATE_END
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   12


LOC  OBJ                  LINE     SOURCE

01B5                       390     NORMAL_CANCEL_BARCODE:
01B5 C606EE0105            391             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
01BA C606F20100            392             MOV MODIFY_ITEM_FLAG, 00H
01BF C606C50101            393             MOV SHOW_BCD_ONCE_FLAG, 01H
01C4 C606AB0101            394             MOV SAY_SOUND_ONCE_FLAG, 01H
01C9 9A0E06----     R      395             CALL FAR PTR STATE_TRANSITION
01CE E96B03                396             JMP CASHIER_STATE_END
01D1                       397     FIRST_JMP_BARCODE_CHECK_NUMBER:
01D1 EB3090                398             JMP BARCODE_CHECK_NUMBER
01D4                       399     BARCODE_CHECK_ENTER:
01D4 803E50007C            400             CMP KBD_CHAR_INPUT, KBD_ENTER
01D9 7528                  401             JNE BARCODE_CHECK_NUMBER
01DB 803E740008            402             CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
01E0 752D                  403             JNE THIRD_JUMP_STATE_END
01E2 803EF40101            404             CMP REFUND_FLAG, 01H
01E7 750D                  405             JNE NORMAL_BARCODE_ENTER
01E9 C606ED0101            406             MOV NETWORK_STATE, NETWORK_ENABLE
01EE 9A0E06----     R      407             CALL FAR PTR STATE_TRANSITION
01F3 E94603                408             JMP CASHIER_STATE_END
01F6                       409     NORMAL_BARCODE_ENTER:
01F6 C606EE0104            410             MOV CASH_REGISTER_STATE, ENTER_QUANTITY
01FB 9A0E06----     R      411             CALL FAR PTR STATE_TRANSITION
0200 E93903                412             JMP CASHIER_STATE_END
0203                       413     BARCODE_CHECK_NUMBER:   
0203 803E740008            414             CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
0208 7405                  415             JE THIRD_JUMP_STATE_END
020A 9A4A05----     R      416             CALL FAR PTR GET_USER_DIGIT
020F                       417     THIRD_JUMP_STATE_END:
020F E92A03                418             JMP CASHIER_STATE_END   
                           419     
                           420     ;User is now entering the quantity      
0212                       421     CASHIER_ENTER_QUANTITY:
0212 803E500000            422             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
0217 7452                  423             JE QUANTITY_CHECK_NUMBER
0219 803E50005F            424             CMP KBD_CHAR_INPUT, KBD_BACKSPACE
021E 7508                  425             JNE QUANTITY_CANCEL_ITEM
0220 9A2306----     R      426             CALL FAR PTR BACKSPACE_KEYPRESS
0225 E91403                427             JMP CASHIER_STATE_END
0228                       428     QUANTITY_CANCEL_ITEM:
0228 803E500044            429             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
022D 751C                  430             JNE QUANTITY_CHECK_ENTER
022F C606EE0105            431             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
0234 C606F20100            432             MOV MODIFY_ITEM_FLAG, 00H
0239 C606C50101            433             MOV SHOW_BCD_ONCE_FLAG, 01H
023E C606AB0101            434             MOV SAY_SOUND_ONCE_FLAG, 01H
0243 9A0E06----     R      435             CALL FAR PTR STATE_TRANSITION
0248 E9F102                436             JMP CASHIER_STATE_END
024B                       437     QUANTITY_CHECK_ENTER:
024B 803E50007C            438             CMP KBD_CHAR_INPUT, KBD_ENTER
0250 7519                  439             JNE QUANTITY_CHECK_NUMBER
0252 803E740000            440             CMP USER_INPUT_LENGTH, 00H
0257 74B6                  441             JE THIRD_JUMP_STATE_END
0259 C606ED0101            442             MOV NETWORK_STATE, NETWORK_ENABLE
025E C606500000            443             MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
0263 9A6A10----     R      444             CALL FAR PTR CLEAR_7SEGMENT
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   13


LOC  OBJ                  LINE     SOURCE

0268 E9D102                445             JMP CASHIER_STATE_END
026B                       446     QUANTITY_CHECK_NUMBER:  
026B 803E740003            447             CMP USER_INPUT_LENGTH, KBD_QUANTITY_LENGTH
0270 7405                  448             JE FOURTH_JUMP_STATE_END
0272 9A4A05----     R      449             CALL FAR PTR GET_USER_DIGIT
0277                       450     FOURTH_JUMP_STATE_END:
0277 E9C202                451             JMP CASHIER_STATE_END
                           452     
                           453     ;Cash register is now displaying the item price after receiving it via serial
027A                       454     CASHIER_DISPLAY_ITEM_PRICE:
027A 803EC50101            455             CMP SHOW_BCD_ONCE_FLAG, 01H
027F 740A                  456             JE CONTINUE_WITH_SOUND_PRICE
0281 C606C50101            457             MOV SHOW_BCD_ONCE_FLAG, 01H
0286 9A5E06----     R      458             CALL FAR PTR DISPLAY_PRICE_ON_BCD
028B                       459     CONTINUE_WITH_SOUND_PRICE:
028B 803EAB0101            460             CMP SAY_SOUND_ONCE_FLAG, 01H
0290 7427                  461             JE PRICE_CHECK_NEW_ITEM
0292 FE06EF01              462             INC PURCHASE_ITEM_COUNT
0296 C606AB0101            463             MOV SAY_SOUND_ONCE_FLAG, 01H
029B C606AA011F            464             MOV SOUND_INDEX_INPUT, SOUND_COST ;To say the word 'cost'
02A0 9ACE0B----     R      465             CALL FAR PTR ADD_SOUND_INDEX
02A5 C606AA012C            466             MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
02AA 9ACE0B----     R      467             CALL FAR PTR ADD_SOUND_INDEX
02AF 9AF70B----     R      468             CALL FAR PTR POPULATE_SOUND_QUEUE
02B4 9AC90D----     R      469             CALL FAR PTR ADD_INCOMING_PRICE
02B9                       470     PRICE_CHECK_NEW_ITEM:
02B9 803E500043            471             CMP KBD_CHAR_INPUT, KBD_TRIGGER_NEW_ITEM
02BE 7517                  472             JNE PRICE_CANCEL_TRANSACTION
02C0 C606EE0103            473             MOV CASH_REGISTER_STATE, ENTER_BARCODE
02C5 C606AB0100            474             MOV SAY_SOUND_ONCE_FLAG, 00H
02CA C606C50100            475             MOV SHOW_BCD_ONCE_FLAG, 00H
02CF 9A0E06----     R      476             CALL FAR PTR STATE_TRANSITION
02D4 E96502                477             JMP CASHIER_STATE_END
02D7                       478     PRICE_CANCEL_TRANSACTION:       
02D7 803E500045            479             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
02DC 7523                  480             JNE PRICE_VIEW_CURRENT
02DE 803EEF0100            481             CMP PURCHASE_ITEM_COUNT, 00H
02E3 7405                  482             JE BYPASS_CANCEL_TRANSACTION
02E5 C606ED0104            483             MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
02EA                       484     BYPASS_CANCEL_TRANSACTION:
02EA C606EE0102            485             MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
02EF C606C40101            486             MOV TRIGGER_P_FLAG, 01H
02F4 9A0E06----     R      487             CALL FAR PTR STATE_TRANSITION
02F9 9AB105----     R      488             CALL FAR PTR CLEAR_ALL_VARIABLES
02FE E93B02                489             JMP CASHIER_STATE_END
0301                       490     PRICE_VIEW_CURRENT:
0301 803E500048            491             CMP KBD_CHAR_INPUT, KBD_TRIGGER_DISPLAY_CURRENT
0306 7514                  492             JNE PRICE_CANCEL_ITEM
0308 803EEF0100            493             CMP PURCHASE_ITEM_COUNT, 00H
030D 7432                  494             JE FIFTH_JUMP_STATE_END
030F C606AA0128            495             MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased
                                   '
0314 9ACE0B----     R      496             CALL FAR PTR ADD_SOUND_INDEX
0319 EB4B90                497             JMP BYPASS_VIEW_TOTAL
031C                       498     PRICE_CANCEL_ITEM:
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   14


LOC  OBJ                  LINE     SOURCE

031C 803E500044            499             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
0321 7521                  500             JNE PRICE_END_TRANSACTION
0323 803EEF0100            501             CMP PURCHASE_ITEM_COUNT, 00H
0328 740D                  502             JE DISPLAY_ERROR_CODE_PRICE
032A C606EE0106            503             MOV CASH_REGISTER_STATE, CANCEL_ITEM
032F 9A0E06----     R      504             CALL FAR PTR STATE_TRANSITION
0334 E90502                505             JMP CASHIER_STATE_END
0337                       506     DISPLAY_ERROR_CODE_PRICE:
0337 C606C20101            507             MOV TRIGGER_E_FLAG, 01H
033C 9A0E06----     R      508             CALL FAR PTR STATE_TRANSITION
0341                       509     FIFTH_JUMP_STATE_END:
0341 E9F801                510             JMP CASHIER_STATE_END
0344                       511     PRICE_END_TRANSACTION:
0344 803E500046            512             CMP KBD_CHAR_INPUT, KBD_TRIGGER_END_TRANSACTION
0349 7555                  513             JNE PRICE_MODIFY_ITEM
034B 803EEF0100            514             CMP PURCHASE_ITEM_COUNT, 00H
0350 7498                  515             JE BYPASS_CANCEL_TRANSACTION
0352 C606EE0107            516             MOV CASH_REGISTER_STATE, END_TRANSACTION
0357 C606ED0102            517             MOV NETWORK_STATE, NETWORK_END_TRANSACTION
035C C606AA0128            518             MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased
                                   '
0361 9ACE0B----     R      519             CALL FAR PTR ADD_SOUND_INDEX
0366                       520     BYPASS_VIEW_TOTAL:
0366 9A0E06----     R      521             CALL FAR PTR STATE_TRANSITION
036B 33C9                  522             XOR CX, CX
036D 33DB                  523             XOR BX, BX
036F B10A                  524             MOV CL, 10
0371                       525     TRANSFER_TO_ITEM_PRICE:
0371 8A87E001              526             MOV AL, TOTAL_PRICE[BX]
0375 8887CF01              527             MOV ITEM_PRICE[BX], AL
0379 43                    528             INC BX
037A E2F5                  529             LOOP TRANSFER_TO_ITEM_PRICE
037C A0EA01                530             MOV AL, TOTAL_PLACE_VALUE
037F 0430                  531             ADD AL, 48
0381 A2D901                532             MOV PLACE_VALUE, AL
0384 A2DA01                533             MOV TMP_PLACE_VALUE, AL
0387 2C2B                  534             SUB AL, 43
0389 A2CE01                535             MOV SERIAL_INDEX, AL
038C 9A5E06----     R      536             CALL FAR PTR DISPLAY_PRICE_ON_BCD
0391 9AF70B----     R      537             CALL FAR PTR POPULATE_SOUND_QUEUE
0396 803EEE0108            538             CMP CASH_REGISTER_STATE, CHANGE_PAY
039B 7464                  539             JE FIRST_JUMP_CHANGE_REMAINING
039D E99C01                540             JMP CASHIER_STATE_END
03A0                       541     PRICE_MODIFY_ITEM:
03A0 803E500047            542             CMP KBD_CHAR_INPUT, KBD_TRIGGER_MODIFY
03A5 759A                  543             JNE FIFTH_JUMP_STATE_END
03A7 803EEF0100            544             CMP PURCHASE_ITEM_COUNT, 00H
03AC 7412                  545             JE DISPLAY_ERROR_MODIFY_PRICE
03AE C606EE0103            546             MOV CASH_REGISTER_STATE, ENTER_BARCODE
03B3 C606F20101            547             MOV MODIFY_ITEM_FLAG, 01H
03B8 9A0E06----     R      548             CALL FAR PTR STATE_TRANSITION
03BD E97C01                549             JMP CASHIER_STATE_END
03C0                       550     DISPLAY_ERROR_MODIFY_PRICE:
03C0 C606C20101            551             MOV TRIGGER_E_FLAG, 01H
03C5 9A0E06----     R      552             CALL FAR PTR STATE_TRANSITION   
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   15


LOC  OBJ                  LINE     SOURCE

03CA E96F01                553             JMP CASHIER_STATE_END
                           554             
                           555     ; Cashier is now cancelling a single item in the transaction
03CD                       556     CASHIER_CANCEL_ITEM:
03CD 803E500000            557             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
03D2 744B                  558             JE CANCEL_CHECK_NUMBER
03D4 803E50005F            559             CMP KBD_CHAR_INPUT, KBD_BACKSPACE
03D9 7508                  560             JNE CANCEL_CHECK_AGAIN
03DB 9A2306----     R      561             CALL FAR PTR BACKSPACE_KEYPRESS
03E0 E95901                562             JMP CASHIER_STATE_END
03E3                       563     CANCEL_CHECK_AGAIN:
03E3 803E500044            564             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_ITEM
03E8 751A                  565             JNE CANCEL_CHECK_ENTER
03EA C606EE0105            566             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
03EF C606C50101            567             MOV SHOW_BCD_ONCE_FLAG, 01H
03F4 C606AB0101            568             MOV SAY_SOUND_ONCE_FLAG, 01H
03F9 9A0E06----     R      569             CALL FAR PTR STATE_TRANSITION
03FE E93B01                570             JMP CASHIER_STATE_END
0401                       571     FIRST_JUMP_CHANGE_REMAINING:
0401 E91C01                572             JMP CHANGE_REMAINING
0404                       573     CANCEL_CHECK_ENTER:
0404 803E50007C            574             CMP KBD_CHAR_INPUT, KBD_ENTER
0409 7514                  575             JNE CANCEL_CHECK_NUMBER
040B 803E740008            576             CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
0410 750A                  577             JNE SIXTH_JUMP_STATE_END
0412 C606ED0101            578             MOV NETWORK_STATE, NETWORK_ENABLE
0417 9A0E06----     R      579             CALL FAR PTR STATE_TRANSITION
041C                       580     SIXTH_JUMP_STATE_END:
041C E91D01                581             JMP CASHIER_STATE_END
041F                       582     CANCEL_CHECK_NUMBER:    
041F 803E740008            583             CMP USER_INPUT_LENGTH, KBD_BARCODE_LENGTH
0424 74F6                  584             JE SIXTH_JUMP_STATE_END
0426 9A4A05----     R      585             CALL FAR PTR GET_USER_DIGIT
042B EBEF                  586             JMP SIXTH_JUMP_STATE_END
                           587             
                           588     ; Cashier is now ending the transaction 
042D                       589     CASHIER_END_TRANSACTION:
042D 803E500045            590             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
0432 7508                  591             JNE END_CHANGE_PAY
0434 C606ED0104            592             MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
0439 E9AEFE                593             JMP BYPASS_CANCEL_TRANSACTION
043C                       594     END_CHANGE_PAY:
043C 803E500049            595             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CHANGE_PAY
0441 75D9                  596             JNE SIXTH_JUMP_STATE_END
0443 C606EE0108            597             MOV CASH_REGISTER_STATE, CHANGE_PAY
0448 9A0E06----     R      598             CALL FAR PTR STATE_TRANSITION
044D C606520000            599             MOV CHANGE_PLACE_VALUE, 00H
0452 E9E700                600             JMP CASHIER_STATE_END
                           601             
                           602     ;Cashier is now calculating the change
0455                       603     CASHIER_CHANGE_PAY:
0455 803E500000            604             CMP KBD_CHAR_INPUT, KBD_CHAR_RESET
045A 7443                  605             JE CHANGE_NUMBER
045C 803E50005F            606             CMP KBD_CHAR_INPUT, KBD_BACKSPACE
0461 7508                  607             JNE CHANGE_CANCEL_TRANSACTION
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   16


LOC  OBJ                  LINE     SOURCE

0463 9A2306----     R      608             CALL FAR PTR BACKSPACE_KEYPRESS
0468 E9D100                609             JMP CASHIER_STATE_END
046B                       610     CHANGE_CANCEL_TRANSACTION:
046B 803E500045            611             CMP KBD_CHAR_INPUT, KBD_TRIGGER_CANCEL_TRANSACTION
0470 7508                  612             JNE CHANGE_END_TRANSACTION
0472 C606ED0104            613             MOV NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
0477 E970FE                614             JMP BYPASS_CANCEL_TRANSACTION
047A                       615     CHANGE_END_TRANSACTION:
047A 803E500046            616             CMP KBD_CHAR_INPUT, KBD_TRIGGER_END_TRANSACTION
047F 753F                  617             JNE CHANGE_CHECK_ENTER
0481 803EF00101            618             CMP CHANGE_DONE_FLAG, 01H
0486 7514                  619             JNE SEVENTH_JUMP_STATE_END
0488 C606EE0102            620             MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
048D C606C40101            621             MOV TRIGGER_P_FLAG, 01H
0492 9A0E06----     R      622             CALL FAR PTR STATE_TRANSITION
0497 9AB105----     R      623             CALL FAR PTR CLEAR_ALL_VARIABLES
049C                       624     SEVENTH_JUMP_STATE_END:
049C E99D00                625             JMP CASHIER_STATE_END
049F                       626     CHANGE_NUMBER:  
049F 803E510000            627             CMP KBD_INPUT_STATE, KBD_OLD_INPUT
04A4 74F6                  628             JE SEVENTH_JUMP_STATE_END
04A6 803EF00101            629             CMP CHANGE_DONE_FLAG, 01H
04AB 74EF                  630             JE SEVENTH_JUMP_STATE_END
04AD 803E740008            631             CMP USER_INPUT_LENGTH, KBD_CHANGE_LENGTH
04B2 74E8                  632             JE SEVENTH_JUMP_STATE_END
04B4 FE065200              633             INC CHANGE_PLACE_VALUE
04B8 9A4A05----     R      634             CALL FAR PTR GET_USER_DIGIT
04BD EB7D90                635             JMP CASHIER_STATE_END
04C0                       636     CHANGE_CHECK_ENTER:
04C0 803E50007C            637             CMP KBD_CHAR_INPUT, KBD_ENTER
04C5 7575                  638             JNE CASHIER_STATE_END
04C7 803EF00101            639             CMP CHANGE_DONE_FLAG, 01H
04CC 746E                  640             JE CASHIER_STATE_END
04CE 803E740002            641             CMP USER_INPUT_LENGTH, 02H
04D3 7C67                  642             JL CASHIER_STATE_END
04D5 33DB                  643             XOR BX, BX
04D7 8A1E5200              644             MOV BL, CHANGE_PLACE_VALUE
04DB 8A4752                645             MOV AL, CHANGE_PRICE[BX-1]
04DE 884753                646             MOV CHANGE_PRICE[BX], AL
04E1 8A4751                647             MOV AL, CHANGE_PRICE[BX-2]
04E4 884752                648             MOV CHANGE_PRICE[BX-1], AL
04E7 C647512E              649             MOV CHANGE_PRICE[BX-2], '.'
04EB 802E520002            650             SUB CHANGE_PLACE_VALUE, 2
04F0 9AFD0E----     R      651             CALL FAR PTR CALCULATE_CHANGE
04F5 803E750000            652             CMP CHANGE_SUCCESS_FLAG, 00H
04FA 7417                  653             JE FINISH_CHANGE
04FC C606EE0107            654             MOV CASH_REGISTER_STATE, END_TRANSACTION
0501 C606C20101            655             MOV TRIGGER_E_FLAG, 01H
0506 9A0E06----     R      656             CALL FAR PTR STATE_TRANSITION
050B C606750000            657             MOV CHANGE_SUCCESS_FLAG, 00H
0510 EB2A90                658             JMP CASHIER_STATE_END
0513                       659     FINISH_CHANGE:
0513 C606AA0129            660             MOV SOUND_INDEX_INPUT, SOUND_YOURCHANGEIS ;To say the phrase 'your change is'
0518 9ACE0B----     R      661             CALL FAR PTR ADD_SOUND_INDEX
051D E946FE                662             JMP BYPASS_VIEW_TOTAL
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   17


LOC  OBJ                  LINE     SOURCE

0520                       663     CHANGE_REMAINING:
0520 C606AA012C            664             MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
0525 9ACE0B----     R      665             CALL FAR PTR ADD_SOUND_INDEX
052A C606AA012A            666             MOV SOUND_INDEX_INPUT, SOUND_THANKYOUANDGOODBYE ;To say the phrase 'thank you
                                    and goodbye'
052F 9ACE0B----     R      667             CALL FAR PTR ADD_SOUND_INDEX
0534 C606F00101            668             MOV CHANGE_DONE_FLAG, 01H
0539 EB0190                669             JMP CASHIER_STATE_END
                           670             
053C                       671     CASHIER_STATE_END:      
053C C606500000            672             MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
0541 C606510000            673             MOV KBD_INPUT_STATE, KBD_OLD_INPUT
0546 59                    674             POP     CX
0547 5B                    675             POP     BX
0548 58                    676             POP AX
0549 CB                    677             RET
                           678     CHANGE_CASHIER_STATE ENDP
                           679     
                           680     
                           681     ;Procedure to add user's numeric input to a corresponding array depending on the stat
                                   e
054A                       682     GET_USER_DIGIT PROC FAR
054A 50                    683             PUSH AX
054B 53                    684             PUSH BX
                           685             
054C 803E510000            686             CMP KBD_INPUT_STATE, KBD_OLD_INPUT
0551 745B                  687             JE GET_USER_DIGIT_END
                           688             
0553 33DB                  689             XOR BX, BX
0555 8A1E7400              690             MOV BL, USER_INPUT_LENGTH
0559 A04F00                691             MOV AL, KBD_NUM_INPUT
055C 9A9B07----     R      692             CALL FAR PTR ADD_BCD_QUEUE
0561 A2AA01                693             MOV SOUND_INDEX_INPUT, AL
0564 9ACE0B----     R      694             CALL FAR PTR ADD_SOUND_INDEX
0569 0430                  695             ADD AL, 48
                           696             
056B 803EEE0104            697             CMP CASH_REGISTER_STATE, ENTER_QUANTITY
0570 741B                  698             JE MOV_AL_QUANTITY
                           699             
0572 803EF30101            700             CMP USERNAME_FLAG, 01H
0577 741A                  701             JE MOV_AL_PASSWORD
                           702             
0579 803EEE0101            703             CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
057E 7419                  704             JE MOV_AL_USERNAME
                           705             
0580 803EEE0108            706             CMP CASH_REGISTER_STATE, CHANGE_PAY
0585 7418                  707             JE MOV_AL_CHANGE
                           708             
0587 884769                709             MOV USER_BARCODE[BX], AL
058A EB1990                710             JMP CONTINUE_GET_DIGIT
                           711             
058D                       712     MOV_AL_QUANTITY:
058D 884771                713             MOV USER_QUANTITY[BX], AL
0590 EB1390                714             JMP CONTINUE_GET_DIGIT
                           715             
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   18


LOC  OBJ                  LINE     SOURCE

0593                       716     MOV_AL_PASSWORD:
0593 884763                717             MOV USER_PASSWORD[BX], AL
0596 EB0D90                718             JMP CONTINUE_GET_DIGIT
                           719             
0599                       720     MOV_AL_USERNAME:
0599 88475D                721             MOV USER_USERNAME[BX], AL
059C EB0790                722             JMP CONTINUE_GET_DIGIT
                           723             
059F                       724     MOV_AL_CHANGE:
059F 884753                725             MOV CHANGE_PRICE[BX], AL
05A2 EB0190                726             JMP CONTINUE_GET_DIGIT  
                           727             
05A5                       728     CONTINUE_GET_DIGIT:
05A5 FE067400              729             INC USER_INPUT_LENGTH
05A9 C606510000            730             MOV KBD_INPUT_STATE, KBD_OLD_INPUT
                           731     
05AE                       732     GET_USER_DIGIT_END:     
05AE 5B                    733             POP     BX
05AF 58                    734             POP AX
05B0 CB                    735             RET
                           736     GET_USER_DIGIT ENDP
                           737     
                           738     
                           739     ;Procedure to clear all variables before cancelling/ending a transaction
05B1                       740     CLEAR_ALL_VARIABLES PROC FAR
05B1 53                    741             PUSH BX
05B2 51                    742             PUSH CX
                           743             
05B3 C606520000            744             MOV CHANGE_PLACE_VALUE, 00H
05B8 C606AB0100            745             MOV SAY_SOUND_ONCE_FLAG, 00H
05BD C606C50100            746             MOV SHOW_BCD_ONCE_FLAG, 00H
05C2 C606CE0100            747             MOV SERIAL_INDEX, 00H
05C7 C606EA0100            748             MOV TOTAL_PLACE_VALUE, 00H
05CC C606EB0100            749             MOV CASH_REGISTER_START, 00H
05D1 C606EF0100            750             MOV PURCHASE_ITEM_COUNT, 00H
05D6 C606F00100            751             MOV CHANGE_DONE_FLAG, 00H
05DB C606F10100            752             MOV SWAP_JUMP_FLAG, 00H
05E0 C606F20100            753             MOV MODIFY_ITEM_FLAG, 00H
05E5 C606F30100            754             MOV USERNAME_FLAG, 00H
05EA C606F40100            755             MOV REFUND_FLAG, 00H
05EF C606750000            756             MOV CHANGE_SUCCESS_FLAG, 00H
                           757             
05F4 33DB                  758             XOR BX, BX
05F6 33C9                  759             XOR CX, CX
05F8 B10A                  760             MOV CL, 10
05FA                       761     CLEAR_PRICES:
05FA C6475330              762             MOV CHANGE_PRICE[BX], '0'
05FE C687CF0130            763             MOV ITEM_PRICE[BX], '0'
0603 C687E00130            764             MOV TOTAL_PRICE[BX], '0'
0608 43                    765             INC BX
0609 E2EF                  766             LOOP CLEAR_PRICES
                           767     
060B                       768     CLEAR_VARIABLES_END:    
060B 59                    769             POP     CX
060C 5B                    770             POP     BX
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   19


LOC  OBJ                  LINE     SOURCE

060D CB                    771             RET
                           772     CLEAR_ALL_VARIABLES ENDP
                           773     
                           774     
                           775     ;Procedure to clear variables when changing states
060E                       776     STATE_TRANSITION PROC FAR       
060E C606500000            777             MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
0613 C606740000            778             MOV USER_INPUT_LENGTH, 00H
0618 C606510000            779             MOV KBD_INPUT_STATE, KBD_OLD_INPUT
061D 9A6A10----     R      780             CALL FAR PTR CLEAR_7SEGMENT
0622 CB                    781             RET
                           782     STATE_TRANSITION ENDP
                           783     
                           784     
                           785     ;Procedure to remove user's most recent keyboard input and replace it with a zero on 
                                   the BCD
0623                       786     BACKSPACE_KEYPRESS PROC FAR     
0623 50                    787             PUSH AX
                           788     
0624 803E740000            789             CMP USER_INPUT_LENGTH, 00H
0629 7431                  790             JE BACKSPACE_KEYPRESS_END
062B FE0E7400              791             DEC USER_INPUT_LENGTH
062F FE0E5200              792             DEC CHANGE_PLACE_VALUE
                           793             
0633 A0BB01                794             MOV AL, BCD_DISPLAY[1]
0636 A2BA01                795             MOV BCD_DISPLAY[0], AL
0639 A0BC01                796             MOV AL, BCD_DISPLAY[2]
063C A2BB01                797             MOV BCD_DISPLAY[1], AL
063F A0BD01                798             MOV AL, BCD_DISPLAY[3]
0642 A2BC01                799             MOV BCD_DISPLAY[2], AL
0645 A0BE01                800             MOV AL, BCD_DISPLAY[4]
0648 A2BD01                801             MOV BCD_DISPLAY[3], AL
064B A0BF01                802             MOV AL, BCD_DISPLAY[5]
064E A2BE01                803             MOV BCD_DISPLAY[4], AL
0651 A0AC01                804             MOV AL, BCD_NUMBERS[0]
0654 A2BF01                805             MOV BCD_DISPLAY[5], AL
                           806             
0657 C606500000            807             MOV KBD_CHAR_INPUT, KBD_CHAR_RESET
                           808             
065C                       809     BACKSPACE_KEYPRESS_END: 
065C 58                    810             POP AX
065D CB                    811             RET
                           812     BACKSPACE_KEYPRESS ENDP
                           813     
                           814     
                           815     ;Procedure that will display the price received via serial on the 7-segment display
065E                       816     DISPLAY_PRICE_ON_BCD PROC FAR   
065E 50                    817             PUSH AX
065F 53                    818             PUSH BX
0660 51                    819             PUSH CX
                           820     
0661 33DB                  821             XOR BX, BX
0663 33C9                  822             XOR CX, CX
                           823             
0665 803ED90145            824             CMP PLACE_VALUE, 'E'
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   20


LOC  OBJ                  LINE     SOURCE

066A 7510                  825             JNE CONTINUE_NORMAL_DISPLAY
066C A0B701                826             MOV AL, BCD_NUMBERS[11]
066F A2BA01                827             MOV BCD_DISPLAY[0], AL
0672 8A0ECE01              828             MOV CL, SERIAL_INDEX
0676 80E902                829             SUB CL, 2
0679 EB0F90                830             JMP PUT_DIGIT_IN_BCD
                           831             
067C                       832     CONTINUE_NORMAL_DISPLAY:
067C 8A0ED901              833             MOV CL, PLACE_VALUE
0680 80E92D                834             SUB CL, 45 ;Subtract 48 to convert to number and add 3 to take care of decima
                                   l digits
                           835             
0683 80F907                836             CMP CL, 7
0686 7E02                  837             JLE PUT_DIGIT_IN_BCD
0688 B107                  838             MOV CL, 7
                           839             
068A                       840     PUT_DIGIT_IN_BCD:       
068A 8A87CF01              841             MOV AL, ITEM_PRICE[BX]
068E 3C2E                  842             CMP AL, '.'
0690 740D                  843             JE DECIMAL_ADD
0692 2C30                  844             SUB AL, 48
0694 A24F00                845             MOV KBD_NUM_INPUT, AL
0697 9A9B07----     R      846             CALL FAR PTR ADD_BCD_QUEUE
069C EB0990                847             JMP END_PUT_DIGIT_LOOP
                           848             
069F                       849     DECIMAL_ADD:
069F A0BA01                850             MOV AL, BCD_DISPLAY[0]
06A2 0C80                  851             OR AL, 80H
06A4 A2BA01                852             MOV BCD_DISPLAY[0], AL
                           853             
06A7                       854     END_PUT_DIGIT_LOOP:
06A7 43                    855             INC BX
06A8 E2E0                  856             LOOP PUT_DIGIT_IN_BCD
                           857     
06AA                       858     DISPLAY_PRICE_ON_BCD_END:       
06AA 59                    859             POP     CX
06AB 5B                    860             POP     BX
06AC 58                    861             POP AX
06AD CB                    862             RET
                           863     DISPLAY_PRICE_ON_BCD ENDP
                           864     
                           865     
                           866     ;Procedure to read both the keypads for user inputs
06AE                       867     KEYPAD_READ PROC FAR
06AE 52                    868             PUSH DX
06AF 51                    869             PUSH CX
06B0 53                    870             PUSH BX
06B1 50                    871             PUSH AX
06B2 56                    872             PUSH SI
                           873                                             
06B3 B300                  874             MOV BL, 00H        ;initialize BL for key code
06B5 32C0                  875             XOR AL, AL        ;clear all flags
06B7 BA8100                876             MOV DX, PORTB  ;port B address to DX
06BA EE                    877             OUT DX, AL        ;ground all rows
06BB BA8200                878             MOV DX, PORTC        ;Port C address to DX
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   21


LOC  OBJ                  LINE     SOURCE

                           879                  
06BE EC                    880             IN AL, DX        ;read all columns
06BF 2477                  881             AND AL,77H  ;D0-D2 and D4-D6 are the 6 input pins for two keypads 0111 0111(7
                                   7H)                          
06C1 3C77                  882             CMP AL,77H
06C3 7439                  883             JZ RESET_FLAG 
                           884     
06C5 803E4E0001            885             CMP DS:KEY_FLAG, 01H
06CA 7437                  886             JZ IGNORE_KEYPRESS        ;if flag is set don't send keypad input to hyperter
                                   minal
                           887     
06CC B07F                  888             MOV AL, 07FH       ;load data byte to ground a row
06CE B704                  889             MOV BH, 04H        ;set row counter
                           890     
06D0                       891     NXTROW:                
06D0 D0C0                  892             ROL AL, 01H       ;rotate AL to ground next row
06D2 8AE8                  893             MOV CH, AL        ;save data byte to ground next row
06D4 BA8100                894             MOV DX, PORTB        ;port B address to DX
06D7 EE                    895             OUT DX, AL        ;ground one of the rows
06D8 BA8200                896             MOV DX, PORTC        ;port C address to DX
06DB EC                    897             IN AL, DX        ;read input port for key closure
                           898             
06DC 8AE0                  899             MOV AH,AL
06DE D0CC                  900             ROR AH,01H
                           901             
06E0 80E438                902             AND AH,38H
06E3 2407                  903             AND AL,07H
06E5 0AC4                  904             OR AL,AH
                           905     
06E7 243F                  906             AND AL,3FH ;D0-D2 and D4-D6 are the 6 input pins for two keypads 0111 0111(77
                                   H)
06E9 B106                  907             MOV CL, 06H        ;set column counter
                           908     
06EB                       909     POLL_COLUMNS:        
06EB D0D8                  910             RCR AL, 01H       ;move D0 to CF        
06ED 7365                  911             JNC SEND_KEY        ;key closure is found, if CF=0
06EF FEC3                  912             INC BL                ;inc BL for next binary key code                       
                                     
                           913     
06F1 FEC9                  914             DEC CL                ;dec column counter if no key closure
06F3 75F6                  915             JNZ POLL_COLUMNS        ;check for key closure in next column
06F5 8AC5                  916             MOV AL, CH        ;Load data byte to ground next row
06F7 FECF                  917             DEC BH                ;if no key closure found in all columns in this row, go
                                    to ground next row
06F9 75D5                  918             JNZ NXTROW        ;go back to ground next row   
06FB E99700                919             JMP SKIP_SEND       
                           920     
06FE                       921     RESET_FLAG:
06FE C6064E0000            922             MOV DS:KEY_FLAG, 00H  ;if no keypad input is found, reset flag so that next k
                                   eypad input is printed
                           923             
0703                       924     IGNORE_KEYPRESS:
0703 9A3E00----     R      925             CALL FAR PTR CHANGE_CASHIER_STATE ;Function call to check if there is a chang
                                   e in the cash register's state     
0708 803EEE0100            926             CMP CASH_REGISTER_STATE, WAITING_FOR_LOGIN
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   22


LOC  OBJ                  LINE     SOURCE

070D 7442                  927             JE TEMP_JUMP_SKIP_SEND
070F 803EEE0101            928             CMP CASH_REGISTER_STATE, ENTER_LOGIN_USERNAME
0714 743B                  929             JE TEMP_JUMP_SKIP_SEND
0716 FF06C901              930             INC TIMEOUT_COUNTER
071A 813EC9010406          931             CMP TIMEOUT_COUNTER, TIMEOUT_COUNTER_LEN
0720 752F                  932             JNE TEMP_JUMP_SKIP_SEND
0722 C706C9010000          933             MOV TIMEOUT_COUNTER, 0
0728 FE06CB01              934             INC TIMEOUT_SEC_COUNT
072C 803ECB0108            935             CMP TIMEOUT_SEC_COUNT, 08H
0731 7562                  936             JNE SKIP_SEND
0733 C606C10101            937             MOV TRIGGER_L_FLAG, 01H
0738 C606EE0100            938             MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
073D C606CB0100            939             MOV TIMEOUT_SEC_COUNT, 0
0742 9A0E06----     R      940             CALL FAR PTR STATE_TRANSITION
0747 9AB105----     R      941             CALL FAR PTR CLEAR_ALL_VARIABLES        
074C C606ED0103            942             MOV NETWORK_STATE, NETWORK_LOGOUT
0751                       943     TEMP_JUMP_SKIP_SEND:
0751 EB4290                944             JMP SKIP_SEND ;if flag is set don't send keypad input to hyperterminal
                           945             
0754                       946     SEND_KEY:
0754 80FB0B                947             CMP BL,0BH
0757 7F07                  948             JG LOAD_KEYS_PART2
                           949             
0759                       950     LOAD_KEYS_PART1:        
0759 8D363600              951         LEA SI,KEYS_PART1 
075D EB0890                952         JMP SEND_CHAR
                           953             
0760                       954     LOAD_KEYS_PART2:
0760 80EB0C                955         SUB BL,0CH
0763 8D364200              956         LEA SI,KEYS_PART2
                           957             
0767                       958     SEND_CHAR:
0767 33C0                  959         XOR AX, AX
0769 8AC3                  960         MOV AL,BL
076B 03F0                  961         ADD SI,AX
076D 8A04                  962         MOV AL,[SI]
                           963             
076F 2C30                  964         SUB AL, 48 ;Converting to number
0771 3C09                  965             CMP AL, 09H ;If number is > 9 then it is some other character and not a numer
                                   ic digit
0773 7E08                  966             JLE SEND_NUMBER
                           967             
0775 0430                  968             ADD AL, 48
0777 A25000                969             MOV KBD_CHAR_INPUT, AL
077A EB0990                970             JMP KEYPAD_END
                           971     
077D                       972     SEND_NUMBER:
                           973             ;manipulating the number
077D A24F00                974             MOV KBD_NUM_INPUT, AL
0780 C606510001            975             MOV KBD_INPUT_STATE, KBD_NEW_INPUT
                           976             
0785                       977     KEYPAD_END:
0785 C6064E0001            978         MOV DS:KEY_FLAG, 01H ;set flag to one so that next time same key input is not pri
                                   nted
078A C606CB0100            979             MOV TIMEOUT_SEC_COUNT, 0
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   23


LOC  OBJ                  LINE     SOURCE

078F C706C9010000          980             MOV TIMEOUT_COUNTER, 0
                           981             
0795                       982     SKIP_SEND:
0795 5E                    983             POP SI
0796 58                    984             POP AX
0797 5B                    985             POP BX
0798 59                    986             POP CX
0799 5A                    987             POP DX
079A CB                    988             RET     
                           989     KEYPAD_READ ENDP
                           990     
                           991     
                           992     ;Procedure that will add user's numeric input to the BCD display
079B                       993     ADD_BCD_QUEUE PROC FAR
079B 50                    994             PUSH AX
079C 53                    995             PUSH BX
                           996     
079D 33DB                  997             XOR BX, BX
                           998     
079F 8A1E4F00              999             MOV BL, KBD_NUM_INPUT
07A3 8AA7AC01             1000             MOV AH, BCD_NUMBERS[BX]
                          1001             
07A7 A0BE01               1002             MOV AL, BCD_DISPLAY[4]
07AA A2BF01               1003             MOV BCD_DISPLAY[5], AL
07AD A0BD01               1004             MOV AL, BCD_DISPLAY[3]
07B0 A2BE01               1005             MOV BCD_DISPLAY[4], AL
07B3 A0BC01               1006             MOV AL, BCD_DISPLAY[2]
07B6 A2BD01               1007             MOV BCD_DISPLAY[3], AL
07B9 A0BB01               1008             MOV AL, BCD_DISPLAY[1]
07BC A2BC01               1009             MOV BCD_DISPLAY[2], AL
07BF A0BA01               1010             MOV AL, BCD_DISPLAY[0]
07C2 A2BB01               1011             MOV BCD_DISPLAY[1], AL          
07C5 8826BA01             1012             MOV BCD_DISPLAY[0], AH
                          1013             
07C9                      1014     BCD_ADD_END:    
07C9 5B                   1015             POP     BX
07CA 58                   1016             POP AX
07CB CB                   1017             RET
                          1018     ADD_BCD_QUEUE ENDP
                          1019                     
                          1020     
                          1021     ;Procedure that is called whenever something is being sent via serial
07CC                      1022     SERIAL_REC_ACTION       PROC    FAR
07CC 50                   1023             PUSH AX
07CD 53                   1024             PUSH BX
07CE 51                   1025             PUSH CX
07CF 52                   1026             PUSH DX
                          1027     
07D0 803EEB0101           1028             CMP CASH_REGISTER_START, 01H
07D5 745D                 1029             JE FIRST_JUMP_CASHIER_RECEIVER
                          1030             
07D7 803ECC0101           1031             CMP START_READ, 01H
07DC 7413                 1032             JE START_READING_ID_VALUES
                          1033             
07DE 3C5B                 1034             CMP AL, '['
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   24


LOC  OBJ                  LINE     SOURCE

07E0 7403                 1035             JE START_READING_ID
07E2 E9D300               1036             JMP END_SERIAL_COMMUNICATION
                          1037             
07E5                      1038     START_READING_ID:
07E5 FE06EC01             1039             INC CASH_REGISTER_FLAG
07E9 C606CC0101           1040             MOV START_READ, 01H
07EE E9C700               1041             JMP END_SERIAL_COMMUNICATION
                          1042             
07F1                      1043     START_READING_ID_VALUES:
07F1 33DB                 1044             XOR BX, BX
07F3 8A1EEC01             1045             MOV BL, CASH_REGISTER_FLAG
07F7 4B                   1046             DEC BX
                          1047             
07F8 3A4730               1048             CMP AL, CASH_REGISTER_ID[BX]
07FB 753A                 1049             JNE FIRST_JUMP_INITIALIZE_TERMINATE
07FD 803EEC0106           1050             CMP CASH_REGISTER_FLAG, 06H
0802 7529                 1051             JNE NORMAL_ID_CHECK
0804 803EED0100           1052             CMP NETWORK_STATE, NETWORK_DISABLE
0809 742F                 1053             JE FIRST_JUMP_NEGATIVE_ACKNOWLEDGEMENT
080B 803EED0102           1054             CMP NETWORK_STATE, NETWORK_END_TRANSACTION
0810 7465                 1055             JE SEND_END_TRANSACTION_ACK
0812 803EED0103           1056             CMP NETWORK_STATE, NETWORK_LOGOUT
0817 7424                 1057             JE SEND_LOGOUT_ACK
0819 803EED0104           1058             CMP NETWORK_STATE, NETWORK_CANCEL_TRANSACTION
081E 743A                 1059             JE SEND_CANCEL_ACK
0820 C606EB0101           1060             MOV CASH_REGISTER_START, 01H
0825 9AEF0A----     R     1061             CALL FAR PTR SEND_TO_PC
082A E98B00               1062             JMP END_SERIAL_COMMUNICATION
082D                      1063     NORMAL_ID_CHECK:
082D FE06EC01             1064             INC CASH_REGISTER_FLAG
0831 E98400               1065             JMP END_SERIAL_COMMUNICATION
                          1066             
0834                      1067     FIRST_JUMP_CASHIER_RECEIVER:
0834 E98400               1068             JMP CASH_REGISTER_RECEIVE_START
                          1069             
0837                      1070     FIRST_JUMP_INITIALIZE_TERMINATE:
0837 EB7090               1071             JMP INITIALIZE_TERMINATE_SERIAL
                          1072             
083A                      1073     FIRST_JUMP_NEGATIVE_ACKNOWLEDGEMENT:
083A EB5890               1074             JMP SEND_NEGATIVE_ACK
                          1075             
083D                      1076     SEND_LOGOUT_ACK:
083D B02A                 1077             MOV AL, '*'
083F 9A0000----     E     1078             CALL FAR PTR PRINT_CHAR
0844 B032                 1079             MOV AL, '2'
0846 9A0000----     E     1080             CALL FAR PTR PRINT_CHAR
084B B02A                 1081             MOV AL, '*'
084D 9A0000----     E     1082             CALL FAR PTR PRINT_CHAR
0852 C606ED0100           1083             MOV NETWORK_STATE, NETWORK_DISABLE
0857 EB5090               1084             JMP INITIALIZE_TERMINATE_SERIAL
                          1085     
085A                      1086     SEND_CANCEL_ACK:
085A B02A                 1087             MOV AL, '*'
085C 9A0000----     E     1088             CALL FAR PTR PRINT_CHAR
0861 B033                 1089             MOV AL, '3'
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   25


LOC  OBJ                  LINE     SOURCE

0863 9A0000----     E     1090             CALL FAR PTR PRINT_CHAR
0868 B02A                 1091             MOV AL, '*'
086A 9A0000----     E     1092             CALL FAR PTR PRINT_CHAR
086F C606ED0100           1093             MOV NETWORK_STATE, NETWORK_DISABLE
0874 EB3390               1094             JMP INITIALIZE_TERMINATE_SERIAL 
                          1095             
0877                      1096     SEND_END_TRANSACTION_ACK:
0877 B02A                 1097             MOV AL, '*'
0879 9A0000----     E     1098             CALL FAR PTR PRINT_CHAR
087E B034                 1099             MOV AL, '4'
0880 9A0000----     E     1100             CALL FAR PTR PRINT_CHAR
0885 B02A                 1101             MOV AL, '*'
0887 9A0000----     E     1102             CALL FAR PTR PRINT_CHAR
088C C606ED0100           1103             MOV NETWORK_STATE, NETWORK_DISABLE
0891 EB1690               1104             JMP INITIALIZE_TERMINATE_SERIAL
                          1105             
0894                      1106     SEND_NEGATIVE_ACK:
0894 B02A                 1107             MOV AL, '*'
0896 9A0000----     E     1108             CALL FAR PTR PRINT_CHAR
089B B030                 1109             MOV AL, '0'
089D 9A0000----     E     1110             CALL FAR PTR PRINT_CHAR
08A2 B02A                 1111             MOV AL, '*'
08A4 9A0000----     E     1112             CALL FAR PTR PRINT_CHAR
                          1113             
08A9                      1114     INITIALIZE_TERMINATE_SERIAL:
08A9 C606EB0100           1115             MOV CASH_REGISTER_START, 00H
08AE C606EC0100           1116             MOV CASH_REGISTER_FLAG, 00H
08B3 C606CC0100           1117             MOV START_READ, 00H
                          1118             
08B8                      1119     END_SERIAL_COMMUNICATION:
08B8 E92F02               1120             JMP SERIAL_END
                          1121     
08BB                      1122     CASH_REGISTER_RECEIVE_START:            
08BB 803ECD0101           1123             CMP START_RECEIVE_PRICE, 01H
08C0 740F                 1124             JE START_READING_DIGITS
                          1125             
08C2 3C28                 1126             CMP AL, '('
08C4 7403                 1127             JE START_READING_PRICE
08C6 E92102               1128             JMP SERIAL_END
                          1129             
08C9                      1130     START_READING_PRICE:
08C9 C606CD0101           1131             mov START_RECEIVE_PRICE, 01H
08CE E91902               1132             JMP SERIAL_END
                          1133             
08D1                      1134     START_READING_DIGITS:
08D1 803ECE0100           1135             CMP SERIAL_INDEX, 00H
08D6 742A                 1136             JE GET_PLACE_VALUE
                          1137             
08D8 3C3B                 1138             CMP AL, ';'
08DA 740A                 1139             JE TEMP_INDEX_INCREMENT
                          1140             
08DC 803ECE0102           1141             CMP SERIAL_INDEX, 02H
08E1 7D0A                 1142             JGE GET_DIGITS
                          1143             
08E3 E90402               1144             JMP SERIAL_END
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   26


LOC  OBJ                  LINE     SOURCE

                          1145             
08E6                      1146     TEMP_INDEX_INCREMENT:
08E6 FE06CE01             1147             INC SERIAL_INDEX
08EA E9FD01               1148             JMP SERIAL_END
                          1149             
08ED                      1150     GET_DIGITS:
08ED 3C29                 1151             CMP AL, ')'
08EF 741E                 1152             JE TERMINATE_SERIAL
                          1153             
08F1 33DB                 1154             XOR BX, BX
08F3 8A1ECE01             1155             MOV BL, SERIAL_INDEX
08F7 8887CD01             1156             MOV ITEM_PRICE[BX-2], AL
08FB FE06CE01             1157             INC SERIAL_INDEX        
08FF E9E801               1158             JMP SERIAL_END
                          1159             
0902                      1160     GET_PLACE_VALUE:
0902 FE06CE01             1161             INC SERIAL_INDEX
0906 A2DA01               1162             MOV TMP_PLACE_VALUE, AL
0909 A2D901               1163             MOV PLACE_VALUE, AL
090C E9DB01               1164             JMP SERIAL_END
                          1165             
090F                      1166     TERMINATE_SERIAL:
090F C606EB0100           1167             MOV CASH_REGISTER_START, 00H
0914 C606EC0100           1168             MOV CASH_REGISTER_FLAG, 00H
0919 C606CC0100           1169             MOV START_READ, 00H
091E C606CD0100           1170             MOV START_RECEIVE_PRICE, 00H
0923 C606ED0100           1171             MOV NETWORK_STATE, NETWORK_DISABLE
                          1172             
0928 803ED90141           1173             CMP PLACE_VALUE, 'A'
092D 7426                 1174             JE FIRST_JUMP_CHANGE_BARCODE_STATE
                          1175             
092F 803ED90142           1176             CMP PLACE_VALUE, 'B'
0934 7422                 1177             JE FIRST_JUMP_WRONG_LOGIN
                          1178             
0936 803ED90144           1179             CMP PLACE_VALUE, 'D'
093B 741E                 1180             JE FIRST_JUMP_WRONG_BARCODE
                          1181             
093D 803ED90145           1182             CMP PLACE_VALUE, 'E'
0942 741A                 1183             JE FIRST_JUMP_WRONG_QUANTITY
                          1184             
0944 803EEE0104           1185             CMP CASH_REGISTER_STATE, ENTER_QUANTITY
0949 7416                 1186             JE FIRST_JUMP_PRICE_PROCESSING
                          1187             
094B 803EEE0106           1188             CMP CASH_REGISTER_STATE, CANCEL_ITEM
0950 7412                 1189             JE CANCEL_ITEM_PROCESSING
                          1190             
0952 E99501               1191             JMP SERIAL_END
                          1192             
0955                      1193     FIRST_JUMP_CHANGE_BARCODE_STATE:
0955 E9D300               1194             JMP CHANGE_STATE_TO_BARCODE
                          1195             
0958                      1196     FIRST_JUMP_WRONG_LOGIN:
0958 E90501               1197             JMP DISPLAY_WRONG_LOGIN
                          1198             
095B                      1199     FIRST_JUMP_WRONG_BARCODE:
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   27


LOC  OBJ                  LINE     SOURCE

095B E91901               1200             JMP DISPLAY_WRONG_BARCODE
                          1201             
095E                      1202     FIRST_JUMP_WRONG_QUANTITY:
095E E96301               1203             JMP DISPLAY_WRONG_QUANTITY
                          1204             
0961                      1205     FIRST_JUMP_PRICE_PROCESSING:
0961 E9B500               1206             JMP PRICE_PROCESSING
                          1207             
0964                      1208     CANCEL_ITEM_PROCESSING: 
0964 8A16EA01             1209             MOV DL, TOTAL_PLACE_VALUE
0968 88165200             1210             MOV CHANGE_PLACE_VALUE, DL              
096C 8A26DA01             1211             MOV AH, TMP_PLACE_VALUE
0970 80EC30               1212             SUB AH, 48
0973 8826EA01             1213             MOV TOTAL_PLACE_VALUE, AH       
0977 33C9                 1214             XOR CX, CX
0979 33DB                 1215             XOR BX, BX
097B B10A                 1216             MOV CL, 10
097D                      1217     CREATE_PRICE_ITEMS:
097D 8A97E001             1218             MOV DL, TOTAL_PRICE[BX]
0981 885753               1219             MOV CHANGE_PRICE[BX], DL
0984 8A97CF01             1220             MOV DL, ITEM_PRICE[BX]
0988 8897E001             1221             MOV TOTAL_PRICE[BX], DL
098C 43                   1222             INC BX
098D E2EE                 1223             LOOP CREATE_PRICE_ITEMS 
098F 9AFD0E----     R     1224             CALL FAR PTR CALCULATE_CHANGE
0994 C606520000           1225             MOV CHANGE_PLACE_VALUE, 00H     
0999 33DB                 1226             XOR BX, BX
099B B10A                 1227             MOV CL, 10
099D                      1228     TOTAL_INPUT_PRICE_SWAP:
099D 8A97E001             1229             MOV DL, TOTAL_PRICE[BX]
09A1 8897CF01             1230             MOV ITEM_PRICE[BX], DL
09A5 C6475330             1231             MOV CHANGE_PRICE[BX], '0'
09A9 43                   1232             INC BX
09AA E2F1                 1233             LOOP TOTAL_INPUT_PRICE_SWAP     
09AC 8A26EA01             1234             MOV AH, TOTAL_PLACE_VALUE
09B0 80C405               1235             ADD AH, 5
09B3 8826CE01             1236             MOV SERIAL_INDEX, AH
09B7 80C42B               1237             ADD AH, 43
09BA 8826D901             1238             MOV PLACE_VALUE, AH
09BE 8826DA01             1239             MOV TMP_PLACE_VALUE, AH 
09C2 FE0EEF01             1240             DEC PURCHASE_ITEM_COUNT
09C6 803EF20101           1241             CMP MODIFY_ITEM_FLAG, 01H
09CB 751C                 1242             JNE CONTINUE_CANCELLING 
09CD C606CE0100           1243             MOV SERIAL_INDEX, 00H
09D2 C606EE0104           1244             MOV CASH_REGISTER_STATE, ENTER_QUANTITY
09D7 C606EB0101           1245             MOV CASH_REGISTER_START, 01H
09DC C606C50100           1246             MOV SHOW_BCD_ONCE_FLAG, 00H
09E1 C606AB0100           1247             MOV SAY_SOUND_ONCE_FLAG, 00H
09E6 E90101               1248             JMP SERIAL_END
09E9                      1249     CONTINUE_CANCELLING:
09E9 C606EE0105           1250             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
09EE C606C50101           1251             MOV SHOW_BCD_ONCE_FLAG, 01H
09F3 C606AB0101           1252             MOV SAY_SOUND_ONCE_FLAG, 01H
09F8 9A0E06----     R     1253             CALL FAR PTR STATE_TRANSITION
09FD C606AA0128           1254             MOV SOUND_INDEX_INPUT, SOUND_PURCHASED ;To say the phrase 'you have purchased
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   28


LOC  OBJ                  LINE     SOURCE

                                   '
0A02 9ACE0B----     R     1255             CALL FAR PTR ADD_SOUND_INDEX
0A07 9A5E06----     R     1256             CALL FAR PTR DISPLAY_PRICE_ON_BCD
0A0C 9AF70B----     R     1257             CALL FAR PTR POPULATE_SOUND_QUEUE       
0A11 C606CE0100           1258             MOV SERIAL_INDEX, 00H
0A16 E9D100               1259             JMP SERIAL_END
                          1260             
0A19                      1261     PRICE_PROCESSING:
0A19 C606EE0105           1262             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
0A1E C606F20100           1263             MOV MODIFY_ITEM_FLAG, 00H
0A23 9A0E06----     R     1264             CALL FAR PTR STATE_TRANSITION
0A28 E9BF00               1265             JMP SERIAL_END
                          1266             
0A2B                      1267     CHANGE_STATE_TO_BARCODE:
0A2B C606CE0100           1268             MOV SERIAL_INDEX, 00H
0A30 C606EE0102           1269             MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
0A35 C606C40101           1270             MOV TRIGGER_P_FLAG, 01H
0A3A 9A0E06----     R     1271             CALL FAR PTR STATE_TRANSITION
0A3F C606AA0123           1272             MOV SOUND_INDEX_INPUT, SOUND_GOOD ;To say the word 'good'
0A44 9ACE0B----     R     1273             CALL FAR PTR ADD_SOUND_INDEX
0A49 C606AA012C           1274             MOV SOUND_INDEX_INPUT, SOUND_SILENCE ;To add silence
0A4E 9ACE0B----     R     1275             CALL FAR PTR ADD_SOUND_INDEX
0A53 C606AA0125           1276             MOV SOUND_INDEX_INPUT, SOUND_AFTERNOON ;To say the word 'afternoon'
0A58 9ACE0B----     R     1277             CALL FAR PTR ADD_SOUND_INDEX
0A5D E98A00               1278             JMP SERIAL_END
                          1279             
0A60                      1280     DISPLAY_WRONG_LOGIN:
0A60 C606CE0100           1281             MOV SERIAL_INDEX, 00H
0A65 C606C30101           1282             MOV TRIGGER_A_FLAG, 01H
0A6A C606EE0100           1283             MOV CASH_REGISTER_STATE, WAITING_FOR_LOGIN
0A6F 9A0E06----     R     1284             CALL FAR PTR STATE_TRANSITION
0A74 EB7490               1285             JMP SERIAL_END
                          1286             
0A77                      1287     DISPLAY_WRONG_BARCODE:
0A77 803EF40101           1288             CMP REFUND_FLAG, 01H
0A7C 7519                 1289             JNE NORMAL_WRONG_BARCODE
0A7E C606F40100           1290             MOV REFUND_FLAG, 00H
0A83 C606EE0102           1291             MOV CASH_REGISTER_STATE, WAITING_FOR_BARCODE
0A88 803ECF0131           1292             CMP ITEM_PRICE[0], '1'
0A8D 742E                 1293             JE SHOW_ALPHABET_P
0A8F C606C20101           1294             MOV TRIGGER_E_FLAG, 01H
0A94 EB0B90               1295             JMP CONTINUE_SEND_ERROR
0A97                      1296     NORMAL_WRONG_BARCODE:
0A97 C606EE0105           1297             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
0A9C C606C20101           1298             MOV TRIGGER_E_FLAG, 01H
0AA1                      1299     CONTINUE_SEND_ERROR:
0AA1 C606CE0100           1300             MOV SERIAL_INDEX, 00H
0AA6 C606F20100           1301             MOV MODIFY_ITEM_FLAG, 00H
0AAB C606C50101           1302             MOV SHOW_BCD_ONCE_FLAG, 01H
0AB0 C606AB0101           1303             MOV SAY_SOUND_ONCE_FLAG, 01H    
0AB5 9A0E06----     R     1304             CALL FAR PTR STATE_TRANSITION
0ABA EB2E90               1305             JMP SERIAL_END
0ABD                      1306     SHOW_ALPHABET_P:
0ABD C606C40101           1307             MOV TRIGGER_P_FLAG, 01H
0AC2 EBDD                 1308             JMP CONTINUE_SEND_ERROR
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   29


LOC  OBJ                  LINE     SOURCE

                          1309             
0AC4                      1310     DISPLAY_WRONG_QUANTITY:
0AC4 C606EE0105           1311             MOV CASH_REGISTER_STATE, DISPLAY_ITEM_PRICE
0AC9 C606F20100           1312             MOV MODIFY_ITEM_FLAG, 00H
0ACE C606C50101           1313             MOV SHOW_BCD_ONCE_FLAG, 01H
0AD3 C606AB0101           1314             MOV SAY_SOUND_ONCE_FLAG, 01H
0AD8 9A0E06----     R     1315             CALL FAR PTR STATE_TRANSITION
0ADD 9A5E06----     R     1316             CALL FAR PTR DISPLAY_PRICE_ON_BCD
0AE2 C606CE0100           1317             MOV SERIAL_INDEX, 00H
0AE7 EB0190               1318             JMP SERIAL_END
                          1319             
0AEA                      1320     SERIAL_END:
0AEA 5A                   1321             POP DX
0AEB 59                   1322             POP     CX
0AEC 5B                   1323             POP     BX
0AED 58                   1324             POP AX
0AEE CB                   1325             RET
                          1326     SERIAL_REC_ACTION       ENDP
                          1327     
                          1328     
                          1329     ;Procedure that will send the cash register input to the PC via serial
0AEF                      1330     SEND_TO_PC PROC FAR     
0AEF 50                   1331             PUSH AX
0AF0 53                   1332             PUSH BX
0AF1 51                   1333             PUSH CX
                          1334     
0AF2 803EF40101           1335             CMP REFUND_FLAG, 01H
0AF7 7455                 1336             JE FIRST_JUMP_CANCEL_BARCODE
                          1337             
0AF9 803EF30101           1338             CMP USERNAME_FLAG, 01H
0AFE 740D                 1339             JE SEND_LOGIN_TO_PC
                          1340             
0B00 803EEE0104           1341             CMP CASH_REGISTER_STATE, ENTER_QUANTITY
0B05 744A                 1342             JE SEND_TRANSACTION_TO_PC
                          1343             
0B07 EB4590               1344             JMP FIRST_JUMP_CANCEL_BARCODE
                          1345             
0B0A E9BD00               1346             JMP SEND_PC_END
                          1347     
0B0D                      1348     SEND_LOGIN_TO_PC:       
0B0D B028                 1349             MOV AL, '('
0B0F 9A0000----     E     1350             CALL FAR PTR PRINT_CHAR
0B14 33C9                 1351             XOR CX, CX
0B16 33DB                 1352             XOR BX, BX
0B18 B106                 1353             MOV CL, KBD_USERNAME_LENGTH     
0B1A                      1354     SEND_USERNAME:
0B1A 8A475D               1355             MOV AL, USER_USERNAME[BX]
0B1D 9A0000----     E     1356             CALL FAR PTR PRINT_CHAR
0B22 43                   1357             INC BX
0B23 E2F5                 1358             LOOP SEND_USERNAME              
0B25 B03B                 1359             MOV AL, ';'
0B27 9A0000----     E     1360             CALL FAR PTR PRINT_CHAR
0B2C 33DB                 1361             XOR BX, BX
0B2E B106                 1362             MOV CL, KBD_USERNAME_LENGTH     
0B30                      1363     SEND_PASSWORD:
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   30


LOC  OBJ                  LINE     SOURCE

0B30 8A4763               1364             MOV AL, USER_PASSWORD[BX]
0B33 02C3                 1365             ADD AL, BL
0B35 040F                 1366             ADD AL, 15
0B37 9A0000----     E     1367             CALL FAR PTR PRINT_CHAR
0B3C 43                   1368             INC BX
0B3D E2F1                 1369             LOOP SEND_PASSWORD      
0B3F B029                 1370             MOV AL, ')'
0B41 9A0000----     E     1371             CALL FAR PTR PRINT_CHAR 
0B46 C606F30100           1372             MOV USERNAME_FLAG, 00H
0B4B EB7D90               1373             JMP SEND_PC_END
                          1374             
0B4E                      1375     FIRST_JUMP_CANCEL_BARCODE:
0B4E EB4C90               1376             JMP SEND_CANCEL_BARCODE_PC
                          1377             
0B51                      1378     SEND_TRANSACTION_TO_PC:
0B51 803EF20101           1379             CMP MODIFY_ITEM_FLAG, 01H
0B56 7405                 1380             JE SEND_HASH_CHARACTER
0B58 B05B                 1381             MOV AL, '['
0B5A EB0890               1382             JMP CONTINUE_SENDING_BARCODE
0B5D                      1383     SEND_HASH_CHARACTER:    
0B5D B023                 1384             MOV AL, '#'
0B5F C606EE0106           1385             MOV CASH_REGISTER_STATE, CANCEL_ITEM
0B64                      1386     CONTINUE_SENDING_BARCODE:
0B64 9A0000----     E     1387             CALL FAR PTR PRINT_CHAR
0B69 33C9                 1388             XOR CX, CX
0B6B 33DB                 1389             XOR BX, BX
0B6D B108                 1390             MOV CL, KBD_BARCODE_LENGTH      
0B6F                      1391     SEND_BARCODE:
0B6F 8A4769               1392             MOV AL, USER_BARCODE[BX]
0B72 9A0000----     E     1393             CALL FAR PTR PRINT_CHAR
0B77 43                   1394             INC BX
0B78 E2F5                 1395             LOOP SEND_BARCODE       
0B7A B03B                 1396             MOV AL, ';'
0B7C 9A0000----     E     1397             CALL FAR PTR PRINT_CHAR
0B81 33DB                 1398             XOR BX, BX
0B83 8A0E7400             1399             MOV CL, USER_INPUT_LENGTH       
0B87                      1400     SEND_QUANTITY:
0B87 8A4771               1401             MOV AL, USER_QUANTITY[BX]
0B8A 9A0000----     E     1402             CALL FAR PTR PRINT_CHAR
0B8F 43                   1403             INC BX
0B90 E2F5                 1404             LOOP SEND_QUANTITY      
0B92 B05D                 1405             MOV AL, ']'
0B94 9A0000----     E     1406             CALL FAR PTR PRINT_CHAR
0B99 EB2F90               1407             JMP SEND_PC_END
                          1408             
0B9C                      1409     SEND_CANCEL_BARCODE_PC: 
0B9C 803EF40101           1410             CMP REFUND_FLAG, 01H
0BA1 7405                 1411             JE SEND_DOLLAR
0BA3 B03C                 1412             MOV AL, '<'
0BA5 EB0390               1413             JMP CONTINUE_SEND_CANCEL
0BA8                      1414     SEND_DOLLAR:    
0BA8 B024                 1415             MOV AL, '$'
0BAA                      1416     CONTINUE_SEND_CANCEL:
0BAA 9A0000----     E     1417             CALL FAR PTR PRINT_CHAR
0BAF 33C9                 1418             XOR CX, CX
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   31


LOC  OBJ                  LINE     SOURCE

0BB1 33DB                 1419             XOR BX, BX
0BB3 B108                 1420             MOV CL, KBD_BARCODE_LENGTH      
0BB5                      1421     SEND_ITEM_ID:
0BB5 8A4769               1422             MOV AL, USER_BARCODE[BX]
0BB8 9A0000----     E     1423             CALL FAR PTR PRINT_CHAR
0BBD 43                   1424             INC BX
0BBE E2F5                 1425             LOOP SEND_ITEM_ID               
0BC0 B03E                 1426             MOV AL, '>'
0BC2 9A0000----     E     1427             CALL FAR PTR PRINT_CHAR
0BC7 EB0190               1428             JMP SEND_PC_END
                          1429     
0BCA                      1430     SEND_PC_END:    
0BCA 59                   1431             POP     CX
0BCB 5B                   1432             POP     BX
0BCC 58                   1433             POP AX
0BCD CB                   1434             RET
                          1435     SEND_TO_PC ENDP
                          1436     
                          1437     
                          1438     ;Procedure that will take add the necessary sound indices to the sound queue for spea
                                   ker output based on a parameter
0BCE                      1439     ADD_SOUND_INDEX PROC FAR        
0BCE 50                   1440             PUSH AX
0BCF 53                   1441             PUSH BX
0BD0 51                   1442             PUSH CX
                          1443     
0BD1 33DB                 1444             XOR BX, BX
0BD3 8A1EA901             1445             MOV BL, SOUND_TAIL
0BD7 8A0EAA01             1446             MOV CL, SOUND_INDEX_INPUT
0BDB B002                 1447             MOV AL, 2
0BDD F6E1                 1448             MUL CL
0BDF 88878801             1449             MOV SOUND_QUEUE[BX], AL
                          1450             
0BE3 FE06A901             1451             INC SOUND_TAIL 
0BE7 803EA90120           1452             CMP SOUND_TAIL, 32
0BEC 7C05                 1453             JL SOUND_INDEX_END
0BEE C606A90100           1454             MOV SOUND_TAIL, 00H     
                          1455             
0BF3                      1456     SOUND_INDEX_END:        
0BF3 59                   1457             POP     CX
0BF4 5B                   1458             POP     BX
0BF5 58                   1459             POP AX
0BF6 CB                   1460             RET
                          1461     ADD_SOUND_INDEX ENDP
                          1462     
                          1463     
                          1464     ;Procedure that will convert a price received on the serial into a format which is sa
                                   y-able on the speaker
0BF7                      1465     POPULATE_SOUND_QUEUE PROC FAR   
0BF7 50                   1466             PUSH AX
0BF8 53                   1467             PUSH BX
0BF9 51                   1468             PUSH CX
                          1469     
0BFA 33DB                 1470             XOR BX, BX
0BFC 33C9                 1471             XOR CX, CX
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   32


LOC  OBJ                  LINE     SOURCE

                          1472             
0BFE 802ED90130           1473             SUB     PLACE_VALUE, 48
0C03 8A0ECE01             1474             MOV CL, SERIAL_INDEX
0C07 80E902               1475             SUB CL, 2
0C0A 880ECE01             1476             MOV SERIAL_INDEX, CL    
                          1477             
0C0E                      1478     LOAD_SOUND_QUEUE:
0C0E 8A87CF01             1479             MOV AL, ITEM_PRICE[BX]
0C12 3C2E                 1480             CMP AL, '.'
0C14 7403                 1481             JE SAY_CENTS_VALUE
0C16 EB3490               1482             JMP SAY_OTHER_VALUES
                          1483             
0C19                      1484     SAY_CENTS_VALUE:
0C19 803EDE0100           1485             CMP CENTS_AND_FLAG, 00H
0C1E 740A                 1486             JE CONTINUE_SAYING_CENTS
0C20 C606AA011E           1487             MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
0C25 9ACE0B----     R     1488             CALL FAR PTR ADD_SOUND_INDEX
                          1489             
0C2A                      1490     CONTINUE_SAYING_CENTS:
0C2A 43                   1491             INC BX
0C2B 8A87CF01             1492             MOV AL, ITEM_PRICE[BX]
0C2F A2DB01               1493             MOV TWO_DIGIT_SOUND[0], AL
0C32 43                   1494             INC BX
0C33 8A87CF01             1495             MOV AL, ITEM_PRICE[BX]
0C37 A2DC01               1496             MOV TWO_DIGIT_SOUND[1], AL
0C3A 9A830D----     R     1497             CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
0C3F C606AA0122           1498             MOV SOUND_INDEX_INPUT, SOUND_CENTS ;To say the word 'cents'
0C44 9ACE0B----     R     1499             CALL FAR PTR ADD_SOUND_INDEX 
0C49 E92401               1500             JMP SOUND_POPULATE_END
                          1501             
0C4C                      1502     SAY_OTHER_VALUES:       
0C4C 3C30                 1503             CMP AL, '0'
0C4E 7520                 1504             JNE CHECK_OTHER_VALUES
0C50 803EDF0101           1505             CMP THOUSAND_FLAG, 01H
0C55 7516                 1506             JNE EXIT_FROM_PROCEDURE
0C57 803ED90104           1507             CMP PLACE_VALUE, 4
0C5C 750F                 1508             JNE EXIT_FROM_PROCEDURE
0C5E C606AA011D           1509             MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
0C63 9ACE0B----     R     1510             CALL FAR PTR ADD_SOUND_INDEX 
0C68 C606DF0100           1511             MOV THOUSAND_FLAG, 00H
                          1512             
0C6D                      1513     EXIT_FROM_PROCEDURE:
0C6D E9DF00               1514             JMP CONTINUE_NEXT_ITERATION
                          1515             
0C70                      1516     CHECK_OTHER_VALUES:     
0C70 803ED90106           1517             CMP PLACE_VALUE, 6
0C75 7423                 1518             JE PROCESS_6th_DIGIT
                          1519             
0C77 803ED90105           1520             CMP PLACE_VALUE, 5
0C7C 7443                 1521             JE PROCESS_5th_DIGIT
                          1522             
0C7E 803ED90104           1523             CMP PLACE_VALUE, 4
0C83 7439                 1524             JE TEMP_JUMP_4th_DIGIT
                          1525             
0C85 803ED90103           1526             CMP PLACE_VALUE, 3
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   33


LOC  OBJ                  LINE     SOURCE

0C8A 740E                 1527             JE PROCESS_6th_DIGIT
                          1528             
0C8C 803ED90102           1529             CMP PLACE_VALUE, 2
0C91 742E                 1530             JE PROCESS_5th_DIGIT
                          1531             
0C93 803ED90101           1532             CMP PLACE_VALUE, 1
0C98 7475                 1533             JE PROCESS_4th_DIGIT
                          1534             
0C9A                      1535     PROCESS_6th_DIGIT:
0C9A C606DB0130           1536             MOV TWO_DIGIT_SOUND[0], '0'
0C9F A2DC01               1537             MOV TWO_DIGIT_SOUND[1], AL
0CA2 9A830D----     R     1538             CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
0CA7 C606AA011C           1539             MOV SOUND_INDEX_INPUT, SOUND_HUNDRED ;To say the word 'Hundred'
0CAC 9ACE0B----     R     1540             CALL FAR PTR ADD_SOUND_INDEX 
0CB1 C606DD0101           1541             MOV AND_FLAG, 01H
0CB6 C606DF0101           1542             MOV THOUSAND_FLAG, 01H
0CBB E99100               1543             JMP CONTINUE_NEXT_ITERATION
                          1544             
0CBE                      1545     TEMP_JUMP_4th_DIGIT:
0CBE EB4F90               1546             JMP PROCESS_4th_DIGIT
                          1547             
0CC1                      1548     PROCESS_5th_DIGIT:
0CC1 C606DF0100           1549             MOV THOUSAND_FLAG, 00H
0CC6 803EDD0100           1550             CMP AND_FLAG, 00H
0CCB 740A                 1551             JE CONTINUE_WITH_5th_DIGIT
0CCD C606AA011E           1552             MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
0CD2 9ACE0B----     R     1553             CALL FAR PTR ADD_SOUND_INDEX
                          1554     
0CD7                      1555     CONTINUE_WITH_5th_DIGIT:
0CD7 8A87CF01             1556             MOV AL, ITEM_PRICE[BX]
0CDB A2DB01               1557             MOV TWO_DIGIT_SOUND[0], AL
0CDE 43                   1558             INC BX
0CDF 8A87CF01             1559             MOV AL, ITEM_PRICE[BX]
0CE3 A2DC01               1560             MOV TWO_DIGIT_SOUND[1], AL
0CE6 9A830D----     R     1561             CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
0CEB 803ED90103           1562             CMP PLACE_VALUE, 3
0CF0 7E0A                 1563             JLE CONTINUE_WITH_REST_OF_5th_DIGIT
0CF2 C606AA011D           1564             MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
0CF7 9ACE0B----     R     1565             CALL FAR PTR ADD_SOUND_INDEX 
                          1566             
0CFC                      1567     CONTINUE_WITH_REST_OF_5th_DIGIT:
0CFC FE0ED901             1568             DEC PLACE_VALUE
0D00 C606DD0100           1569             MOV AND_FLAG, 00H
0D05 49                   1570             DEC CX
0D06 EB0490               1571             JMP FIRST_JMP_ITERATION 
                          1572                     
0D09                      1573     FIRST_JMP_TO_LOAD:
0D09 E902FF               1574             JMP LOAD_SOUND_QUEUE
                          1575             
0D0C                      1576     FIRST_JMP_ITERATION:
0D0C EB4190               1577             JMP CONTINUE_NEXT_ITERATION
                          1578             
0D0F                      1579     PROCESS_4th_DIGIT:
0D0F C606DF0100           1580             MOV THOUSAND_FLAG, 00H
0D14 803EDD0100           1581             CMP AND_FLAG, 00H
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   34


LOC  OBJ                  LINE     SOURCE

0D19 740A                 1582             JE CONTINUE_WITH_4th_DIGIT
0D1B C606AA011E           1583             MOV SOUND_INDEX_INPUT, SOUND_AND ;To say the word 'and'
0D20 9ACE0B----     R     1584             CALL FAR PTR ADD_SOUND_INDEX
                          1585             
0D25                      1586     CONTINUE_WITH_4th_DIGIT:
0D25 C606DB0130           1587             MOV TWO_DIGIT_SOUND[0], '0'
0D2A 8A87CF01             1588             MOV AL, ITEM_PRICE[BX]
0D2E A2DC01               1589             MOV TWO_DIGIT_SOUND[1], AL
0D31 9A830D----     R     1590             CALL FAR PTR PROCESS_TWO_DIGIT_SOUND
0D36 803ED90103           1591             CMP PLACE_VALUE, 3
0D3B 7E0A                 1592             JLE CONTINUE_WITH_REST_OF_4th_DIGIT
0D3D C606AA011D           1593             MOV SOUND_INDEX_INPUT, SOUND_THOUSAND ;To say the word 'Thousand'
0D42 9ACE0B----     R     1594             CALL FAR PTR ADD_SOUND_INDEX 
0D47                      1595     CONTINUE_WITH_REST_OF_4th_DIGIT:
0D47 C606DD0100           1596             MOV AND_FLAG, 00H
0D4C EB0190               1597             JMP CONTINUE_NEXT_ITERATION     
                          1598             
0D4F                      1599     CONTINUE_NEXT_ITERATION:
0D4F 43                   1600             INC BX
0D50 FE0ED901             1601             DEC PLACE_VALUE
0D54 803ED90100           1602             CMP PLACE_VALUE, 0
0D59 7403                 1603             JE SAY_DOLLARS_AFTER_PRICE
0D5B EB1090               1604             JMP CONTINUE_AFTER_DOLLAR
                          1605             
0D5E                      1606     SAY_DOLLARS_AFTER_PRICE:
0D5E C606DE0101           1607             MOV CENTS_AND_FLAG, 01H
0D63 C606AA0121           1608             MOV SOUND_INDEX_INPUT, SOUND_DOLLARS ;To say the word 'Dollars'
0D68 9ACE0B----     R     1609             CALL FAR PTR ADD_SOUND_INDEX 
                          1610             
0D6D                      1611     CONTINUE_AFTER_DOLLAR:          
0D6D 49                   1612             DEC CX
0D6E 7599                 1613             JNZ FIRST_JMP_TO_LOAD
                          1614             
0D70                      1615     SOUND_POPULATE_END:     
0D70 C606CE0100           1616             MOV SERIAL_INDEX, 00H
0D75 C606DD0100           1617             MOV AND_FLAG, 00H
0D7A C606DE0100           1618             MOV CENTS_AND_FLAG, 00H
0D7F 59                   1619             POP     CX
0D80 5B                   1620             POP     BX
0D81 58                   1621             POP AX
0D82 CB                   1622             RET
                          1623     POPULATE_SOUND_QUEUE ENDP
                          1624     
                          1625     
                          1626     ;Procedure that will take in  a two digit value and add the corresponding sound indic
                                   es to the sound queue
0D83                      1627     PROCESS_TWO_DIGIT_SOUND PROC FAR        
0D83 50                   1628             PUSH AX
0D84 52                   1629             PUSH DX
                          1630     
0D85 8A16DB01             1631             MOV DL, TWO_DIGIT_SOUND[0]
0D89 80EA30               1632             SUB DL, 48
0D8C 8AF2                 1633             MOV DH, DL
0D8E B00A                 1634             MOV AL, 10
0D90 F6E2                 1635             MUL DL
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   35


LOC  OBJ                  LINE     SOURCE

0D92 8AD0                 1636             MOV DL, AL
                          1637             
0D94 A0DC01               1638             MOV AL, TWO_DIGIT_SOUND[1]
0D97 2C30                 1639             SUB AL, 48
0D99 8AE0                 1640             MOV AH, AL
0D9B 02C2                 1641             ADD AL, DL
                          1642             
0D9D 3C14                 1643             CMP AL, 20
0D9F 7F0B                 1644             JG PLAY_GREATER_THAN_20
0DA1 A2AA01               1645             MOV SOUND_INDEX_INPUT, AL
0DA4 9ACE0B----     R     1646             CALL FAR PTR ADD_SOUND_INDEX
                          1647             
0DA9 EB1B90               1648             JMP TWO_DIGIT_SOUND_END 
                          1649             
0DAC                      1650     PLAY_GREATER_THAN_20:
0DAC 8AC6                 1651             MOV AL, DH
0DAE 0412                 1652             ADD AL, 18
0DB0 A2AA01               1653             MOV SOUND_INDEX_INPUT, AL
0DB3 9ACE0B----     R     1654             CALL FAR PTR ADD_SOUND_INDEX
                          1655             
0DB8 8AC4                 1656             MOV AL, AH
0DBA 3C00                 1657             CMP AL, 0
0DBC 7408                 1658             JE TWO_DIGIT_SOUND_END
0DBE A2AA01               1659             MOV SOUND_INDEX_INPUT, AL
0DC1 9ACE0B----     R     1660             CALL FAR PTR ADD_SOUND_INDEX
                          1661             
0DC6                      1662     TWO_DIGIT_SOUND_END:    
0DC6 5A                   1663             POP DX
0DC7 58                   1664             POP AX
0DC8 CB                   1665             RET
                          1666     PROCESS_TWO_DIGIT_SOUND ENDP
                          1667     
                          1668     
                          1669     ;Procedure that will add the incoming price to the total price
0DC9                      1670     ADD_INCOMING_PRICE PROC FAR     
0DC9 50                   1671             PUSH AX
0DCA 53                   1672             PUSH BX
0DCB 51                   1673             PUSH CX
0DCC 52                   1674             PUSH DX
                          1675     
0DCD A0DA01               1676             MOV AL, TMP_PLACE_VALUE
0DD0 2C30                 1677             SUB AL, 48
0DD2 A2D901               1678             MOV PLACE_VALUE, AL     
                          1679             
0DD5 33C9                 1680             XOR CX, CX
                          1681             
0DD7 A0EA01               1682             MOV AL, TOTAL_PLACE_VALUE
0DDA 3A06D901             1683             CMP AL, PLACE_VALUE
0DDE 745F                 1684             JE FIRST_JMP_ADDITION
0DE0 7C03                 1685             JL ADD_ZERO_TOTAL
0DE2 EB6490               1686             JMP ADD_ZERO_INCOMING
                          1687             
0DE5                      1688     ADD_ZERO_TOTAL:
0DE5 8A16D901             1689             MOV DL, PLACE_VALUE
0DE9 2AD0                 1690             SUB DL, AL
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   36


LOC  OBJ                  LINE     SOURCE

0DEB 0016EA01             1691             ADD TOTAL_PLACE_VALUE, DL
0DEF 8ACA                 1692             MOV CL, DL
0DF1                      1693     START_SHIFT_TOTAL:
0DF1 A0E801               1694             MOV AL, TOTAL_PRICE[8]
0DF4 A2E901               1695             MOV TOTAL_PRICE[9], AL
0DF7 A0E701               1696             MOV AL, TOTAL_PRICE[7]
0DFA A2E801               1697             MOV TOTAL_PRICE[8], AL
0DFD A0E601               1698             MOV AL, TOTAL_PRICE[6]
0E00 A2E701               1699             MOV TOTAL_PRICE[7], AL
0E03 A0E501               1700             MOV AL, TOTAL_PRICE[5]
0E06 A2E601               1701             MOV TOTAL_PRICE[6], AL
0E09 A0E401               1702             MOV AL, TOTAL_PRICE[4]
0E0C A2E501               1703             MOV TOTAL_PRICE[5], AL
0E0F A0E301               1704             MOV AL, TOTAL_PRICE[3]
0E12 A2E401               1705             MOV TOTAL_PRICE[4], AL
0E15 A0E201               1706             MOV AL, TOTAL_PRICE[2]
0E18 A2E301               1707             MOV TOTAL_PRICE[3], AL
0E1B A0E101               1708             MOV AL, TOTAL_PRICE[1]
0E1E A2E201               1709             MOV TOTAL_PRICE[2], AL
0E21 A0E001               1710             MOV AL, TOTAL_PRICE[0]
0E24 A2E101               1711             MOV TOTAL_PRICE[1], AL
0E27 803EF10101           1712             CMP SWAP_JUMP_FLAG, 01H
0E2C 7414                 1713             JE FIRST_CONTINUE_SWAP
0E2E 803EF10102           1714             CMP SWAP_JUMP_FLAG, 02H
0E33 7410                 1715             JE SECOND_CONTINUE_SWAP
0E35 C606E00130           1716             MOV TOTAL_PRICE[0], '0'
0E3A E2B5                 1717             LOOP START_SHIFT_TOTAL
0E3C EB5390               1718             JMP START_ADDITION
                          1719             
0E3F                      1720     FIRST_JMP_ADDITION:
0E3F EB5090               1721             JMP START_ADDITION
                          1722             
0E42                      1723     FIRST_CONTINUE_SWAP:
0E42 E9A500               1724             JMP CONTINUE_FIRST_SWAP
                          1725             
0E45                      1726     SECOND_CONTINUE_SWAP:
0E45 E90A01               1727             JMP CONTINUE_SECOND_SWAP
                          1728             
0E48                      1729     ADD_ZERO_INCOMING:
0E48 8A16D901             1730             MOV DL, PLACE_VALUE
0E4C 2AC2                 1731             SUB AL, DL
0E4E 0006D901             1732             ADD PLACE_VALUE, AL
0E52 8AC8                 1733             MOV CL, AL
0E54                      1734     START_SHIFT_INCOMING:
0E54 A0D701               1735             MOV AL, ITEM_PRICE[8]
0E57 A2D801               1736             MOV ITEM_PRICE[9], AL
0E5A A0D601               1737             MOV AL, ITEM_PRICE[7]
0E5D A2D701               1738             MOV ITEM_PRICE[8], AL
0E60 A0D501               1739             MOV AL, ITEM_PRICE[6]
0E63 A2D601               1740             MOV ITEM_PRICE[7], AL
0E66 A0D401               1741             MOV AL, ITEM_PRICE[5]
0E69 A2D501               1742             MOV ITEM_PRICE[6], AL
0E6C A0D301               1743             MOV AL, ITEM_PRICE[4]
0E6F A2D401               1744             MOV ITEM_PRICE[5], AL
0E72 A0D201               1745             MOV AL, ITEM_PRICE[3]
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   37


LOC  OBJ                  LINE     SOURCE

0E75 A2D301               1746             MOV ITEM_PRICE[4], AL
0E78 A0D101               1747             MOV AL, ITEM_PRICE[2]
0E7B A2D201               1748             MOV ITEM_PRICE[3], AL
0E7E A0D001               1749             MOV AL, ITEM_PRICE[1]
0E81 A2D101               1750             MOV ITEM_PRICE[2], AL
0E84 A0CF01               1751             MOV AL, ITEM_PRICE[0]
0E87 A2D001               1752             MOV ITEM_PRICE[1], AL
0E8A C606CF0130           1753             MOV ITEM_PRICE[0], '0'
0E8F E2C3                 1754         LOOP START_SHIFT_INCOMING   
                          1755             
0E91                      1756     START_ADDITION:
0E91 8A0ED901             1757             MOV CL, PLACE_VALUE
0E95 80C103               1758             ADD CL, 3
0E98 8AD9                 1759             MOV BL, CL
0E9A 4B                   1760             DEC BX
0E9B 33D2                 1761             XOR DX, DX
0E9D                      1762     ADD_DIGITS:
0E9D 80BFCF012E           1763             CMP ITEM_PRICE[BX], '.'
0EA2 7431                 1764             JE ADD_DECIMAL_POINT
0EA4 8A87CF01             1765             MOV AL, ITEM_PRICE[BX]
0EA8 8AA7E001             1766             MOV AH, TOTAL_PRICE[BX]
0EAC 80EC30               1767             SUB AH, 48
0EAF 2C30                 1768             SUB AL, 48
0EB1 02E0                 1769             ADD AH, AL
0EB3 02E2                 1770             ADD AH, DL
0EB5 80FC0A               1771             CMP AH, 10
0EB8 7D0C                 1772             JGE ADD_CARRY_TO_DIGIT
0EBA 80C430               1773             ADD AH, 48
0EBD 88A7E001             1774             MOV TOTAL_PRICE[BX], AH
0EC1 B200                 1775             MOV DL, 00H     
0EC3 EB1590               1776             JMP END_ADD_LOOP
                          1777             
0EC6                      1778     ADD_CARRY_TO_DIGIT:
0EC6 80EC0A               1779             SUB AH, 10
0EC9 80C430               1780             ADD AH, 48
0ECC 88A7E001             1781             MOV TOTAL_PRICE[BX], AH
0ED0 B201                 1782             MOV DL, 01H
0ED2 EB0690               1783             JMP END_ADD_LOOP
                          1784             
0ED5                      1785     ADD_DECIMAL_POINT:
0ED5 C687E0012E           1786             MOV TOTAL_PRICE[BX], '.'
                          1787                     
0EDA                      1788     END_ADD_LOOP:
0EDA 4B                   1789             DEC BX
0EDB E2C0                 1790             LOOP ADD_DIGITS
                          1791             
0EDD 80FA00               1792             CMP DL, 00H
0EE0 7416                 1793             JE INCOMING_PRICE_END   
0EE2 C606F10101           1794             MOV SWAP_JUMP_FLAG, 01H
0EE7 E907FF               1795             JMP START_SHIFT_TOTAL
0EEA                      1796     CONTINUE_FIRST_SWAP:
0EEA C606F10100           1797             MOV SWAP_JUMP_FLAG, 00H
0EEF C606E00131           1798             MOV TOTAL_PRICE[0], '1'
0EF4 FE06EA01             1799             INC TOTAL_PLACE_VALUE
                          1800     
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   38


LOC  OBJ                  LINE     SOURCE

0EF8                      1801     INCOMING_PRICE_END:     
0EF8 5A                   1802             POP DX
0EF9 59                   1803             POP     CX
0EFA 5B                   1804             POP     BX
0EFB 58                   1805             POP AX
0EFC CB                   1806             RET
                          1807     ADD_INCOMING_PRICE ENDP
                          1808     
                          1809     
                          1810     ;Procedure that will subtract the total price from the amount the user wants to pay a
                                   nd calculate the change
0EFD                      1811     CALCULATE_CHANGE PROC FAR       
0EFD 50                   1812             PUSH AX
0EFE 53                   1813             PUSH BX
0EFF 51                   1814             PUSH CX
0F00 52                   1815             PUSH DX
                          1816     
0F01 A05200               1817             MOV AL, CHANGE_PLACE_VALUE
0F04 3A06EA01             1818             CMP AL, TOTAL_PLACE_VALUE
0F08 7F26                 1819             JG START_SUBTRACTION
0F0A 7C1C                 1820             JL SAY_ERROR
                          1821             
0F0C 33C9                 1822             XOR CX, CX
0F0E 33DB                 1823             XOR BX, BX
0F10 8A0EEA01             1824             MOV CL, TOTAL_PLACE_VALUE
0F14 80C103               1825             ADD CL, 3
                          1826     
0F17                      1827     CHECK_FOR_LESSER:
0F17 8A87E001             1828             MOV AL, TOTAL_PRICE[BX]
0F1B 384753               1829             CMP CHANGE_PRICE[BX], AL        
0F1E 7C08                 1830             JL SAY_ERROR
0F20 7F0E                 1831             JG START_SUBTRACTION
0F22 43                   1832             INC BX
0F23 E2F2                 1833             LOOP CHECK_FOR_LESSER
0F25 EB0990               1834             JMP START_SUBTRACTION   
                          1835             
0F28                      1836     SAY_ERROR:
0F28 C606750001           1837             MOV CHANGE_SUCCESS_FLAG, 01H
0F2D E9EA00               1838             JMP CALCULATE_CHANGE_END        
                          1839     
0F30                      1840     START_SUBTRACTION:      
0F30 33C9                 1841             XOR CX, CX
                          1842             
0F32 A0EA01               1843             MOV AL, TOTAL_PLACE_VALUE
0F35 3A065200             1844             CMP AL, CHANGE_PLACE_VALUE
0F39 7C03                 1845             JL SUB_ZERO_TOTAL
0F3B EB2190               1846             JMP SUBTRACT_NUMBER
                          1847             
0F3E                      1848     SUB_ZERO_TOTAL:
0F3E 8A165200             1849             MOV DL, CHANGE_PLACE_VALUE
0F42 2AD0                 1850             SUB DL, AL
0F44 0016EA01             1851             ADD TOTAL_PLACE_VALUE, DL
0F48 8ACA                 1852             MOV CL, DL
0F4A                      1853     SUB_START_SHIFT_TOTAL:
0F4A C606F10102           1854             MOV SWAP_JUMP_FLAG, 02H
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   39


LOC  OBJ                  LINE     SOURCE

0F4F E99FFE               1855             JMP START_SHIFT_TOTAL
0F52                      1856     CONTINUE_SECOND_SWAP:
0F52 C606F10100           1857             MOV SWAP_JUMP_FLAG, 00H
0F57 C606E00130           1858             MOV TOTAL_PRICE[0], '0'
0F5C E2EC                 1859             LOOP SUB_START_SHIFT_TOTAL
                          1860             
0F5E                      1861     SUBTRACT_NUMBER:
0F5E 8A0EEA01             1862             MOV CL, TOTAL_PLACE_VALUE
0F62 80C103               1863             ADD CL, 3
0F65 8AD9                 1864             MOV BL, CL
0F67 4B                   1865             DEC BX
0F68 33D2                 1866             XOR DX, DX
0F6A                      1867     SUBTRACT_DIGITS:
0F6A 80BFE0012E           1868             CMP TOTAL_PRICE[BX], '.'
0F6F 7459                 1869             JE ADD_DECIMAL_POINT_SUB
0F71 8A87E001             1870             MOV AL, TOTAL_PRICE[BX]
0F75 8A6753               1871             MOV AH, CHANGE_PRICE[BX]
0F78 80EC30               1872             SUB AH, 48
0F7B 2C30                 1873             SUB AL, 48
0F7D 3AE0                 1874             CMP AH, AL
0F7F 7C36                 1875             JL BORROW_SUBTRACT
0F81 7F24                 1876             JG NORMAL_SUBTRACT
                          1877     
0F83                      1878     EQUAL_SUBTRACT: 
0F83 2AE0                 1879             SUB AH, AL
0F85 2AE2                 1880             SUB AH, DL
0F87 80FC00               1881             CMP AH, 0
0F8A 7C0C                 1882             JL LESSER_SUBTRACT
                          1883             
0F8C B200                 1884             MOV DL, 0
0F8E 80C430               1885             ADD AH, 48
0F91 88A7E001             1886             MOV TOTAL_PRICE[BX], AH
0F95 EB3890               1887             JMP END_SUB_LOOP
                          1888             
0F98                      1889     LESSER_SUBTRACT:
0F98 80C40A               1890             ADD AH, 10
0F9B B201                 1891             MOV DL, 1
0F9D 80C430               1892             ADD AH, 48
0FA0 88A7E001             1893             MOV TOTAL_PRICE[BX], AH
0FA4 EB2990               1894             JMP END_SUB_LOOP
                          1895             
0FA7                      1896     NORMAL_SUBTRACT:
0FA7 2AE0                 1897             SUB AH, AL
0FA9 2AE2                 1898             SUB AH, DL
0FAB B200                 1899             MOV DL, 0
0FAD 80C430               1900             ADD AH, 48
0FB0 88A7E001             1901             MOV TOTAL_PRICE[BX], AH
0FB4 EB1990               1902             JMP END_SUB_LOOP
                          1903             
0FB7                      1904     BORROW_SUBTRACT:
0FB7 2AE0                 1905             SUB AH, AL
0FB9 2AE2                 1906             SUB AH, DL
0FBB 80C40A               1907             ADD AH, 10
0FBE B201                 1908             MOV DL, 1
0FC0 80C430               1909             ADD AH, 48
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   40


LOC  OBJ                  LINE     SOURCE

0FC3 88A7E001             1910             MOV TOTAL_PRICE[BX], AH
0FC7 EB0690               1911             JMP END_SUB_LOOP
                          1912             
0FCA                      1913     ADD_DECIMAL_POINT_SUB:
0FCA C687E0012E           1914             MOV TOTAL_PRICE[BX], '.'
                          1915                     
0FCF                      1916     END_SUB_LOOP:
0FCF 4B                   1917             DEC BX
0FD0 E298                 1918             LOOP SUBTRACT_DIGITS
                          1919             
0FD2                      1920     REMOVE_SUB_ZERO:
0FD2 803EE00130           1921             CMP TOTAL_PRICE[0], '0'
0FD7 7541                 1922             JNE CALCULATE_CHANGE_END
0FD9 A0E101               1923             MOV AL, TOTAL_PRICE[1]
0FDC A2E001               1924             MOV TOTAL_PRICE[0], AL
0FDF A0E201               1925             MOV AL, TOTAL_PRICE[2]
0FE2 A2E101               1926             MOV TOTAL_PRICE[1], AL
0FE5 A0E301               1927             MOV AL, TOTAL_PRICE[3]
0FE8 A2E201               1928             MOV TOTAL_PRICE[2], AL
0FEB A0E401               1929             MOV AL, TOTAL_PRICE[4]
0FEE A2E301               1930             MOV TOTAL_PRICE[3], AL
0FF1 A0E501               1931             MOV AL, TOTAL_PRICE[5]
0FF4 A2E401               1932             MOV TOTAL_PRICE[4], AL
0FF7 A0E601               1933             MOV AL, TOTAL_PRICE[6]
0FFA A2E501               1934             MOV TOTAL_PRICE[5], AL
0FFD A0E701               1935             MOV AL, TOTAL_PRICE[7]
1000 A2E601               1936             MOV TOTAL_PRICE[6], AL
1003 A0E801               1937             MOV AL, TOTAL_PRICE[8]
1006 A2E701               1938             MOV TOTAL_PRICE[7], AL
1009 A0E901               1939             MOV AL, TOTAL_PRICE[9]
100C A2E801               1940             MOV TOTAL_PRICE[8], AL
100F C606E90130           1941             MOV TOTAL_PRICE[9], '0'
1014 FE0EEA01             1942             DEC TOTAL_PLACE_VALUE
1018 EBB8                 1943             JMP REMOVE_SUB_ZERO
                          1944             
101A                      1945     CALCULATE_CHANGE_END:   
101A 5A                   1946             POP DX
101B 59                   1947             POP     CX
101C 5B                   1948             POP     BX
101D 58                   1949             POP AX
101E CB                   1950             RET
                          1951     CALCULATE_CHANGE ENDP
                          1952     
                          1953     
                          1954     ;Procedure that is called whenever a timer interrupt is received
101F                      1955     TIMER2_ACTION   PROC    FAR
101F FE06C601             1956             INC DS:TIMER_COUNTER_BCD
1023 FF06C701             1957         INC DS:TIMER_COUNTER_KBD
                          1958     
1027 833EC70130           1959         CMP DS:TIMER_COUNTER_KBD, TIMER_COUNTER_KBD_LEN
102C 741C                 1960         JE EXECUTE_KBD
                          1961             
102E 803EC60118           1962         CMP DS:TIMER_COUNTER_BCD, TIMER_COUNTER_BCD_LEN
1033 7408                 1963         JE EXECUTE_BCD
                          1964             
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   41


LOC  OBJ                  LINE     SOURCE

1035                      1965     EXECUTE_SOUND:
1035 9A0111----     R     1966             CALL FAR PTR PLAY_SOUND
103A EB2D90               1967             JMP T2_END
                          1968     
103D                      1969     EXECUTE_BCD:
103D C606C60100           1970             MOV DS:TIMER_COUNTER_BCD, 0
1042 9ACB10----     R     1971             CALL FAR PTR DISPLAY_7SEGMENT
1047 EB2090               1972             JMP T2_END
                          1973             
104A                      1974     EXECUTE_KBD:
104A 9A0111----     R     1975             CALL FAR PTR PLAY_SOUND
104F 9A0111----     R     1976             CALL FAR PTR PLAY_SOUND
1054 C706C7010000         1977             MOV DS:TIMER_COUNTER_KBD, 0
105A 9AAE06----     R     1978             CALL FAR PTR KEYPAD_READ
105F 9A0111----     R     1979             CALL FAR PTR PLAY_SOUND
1064 9A0111----     R     1980             CALL FAR PTR PLAY_SOUND
                          1981             
1069                      1982     T2_END:
1069 CB                   1983             RET
                          1984     TIMER2_ACTION   ENDP
                          1985     
                          1986     
                          1987     ;Procedure that will reset the 7-segment displays back to zeroes
106A                      1988     CLEAR_7SEGMENT PROC FAR
106A 50                   1989             PUSH AX
106B 53                   1990             PUSH BX
106C 51                   1991             PUSH CX
                          1992     
106D 33DB                 1993             XOR BX, BX
106F B90600               1994             MOV CX, 06
                          1995             
1072                      1996     CLEAR_SINGLE_BCD:
1072 803EC10101           1997             CMP TRIGGER_L_FLAG, 01H
1077 741B                 1998             JE ASSIGN_BCD_VALUE_TO_L
                          1999             
1079 803EC20101           2000             CMP TRIGGER_E_FLAG, 01H
107E 741A                 2001             JE ASSIGN_BCD_VALUE_TO_E
                          2002             
1080 803EC30101           2003             CMP TRIGGER_A_FLAG, 01H
1085 7419                 2004             JE ASSIGN_BCD_VALUE_TO_A
                          2005             
1087 803EC40101           2006             CMP TRIGGER_P_FLAG, 01H
108C 7418                 2007             JE ASSIGN_BCD_VALUE_TO_P
                          2008             
108E A0AC01               2009             MOV AL, BCD_NUMBERS[0]
1091 EB1990               2010             JMP ASSIGN_TO_BCD
                          2011             
1094                      2012     ASSIGN_BCD_VALUE_TO_L:
1094 A0B601               2013             MOV AL, BCD_NUMBERS[10]
1097 EB1390               2014             JMP ASSIGN_TO_BCD
                          2015             
109A                      2016     ASSIGN_BCD_VALUE_TO_E:
109A A0B701               2017             MOV AL, BCD_NUMBERS[11]
109D EB0D90               2018             JMP ASSIGN_TO_BCD
                          2019             
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   42


LOC  OBJ                  LINE     SOURCE

10A0                      2020     ASSIGN_BCD_VALUE_TO_A:
10A0 A0B801               2021             MOV AL, BCD_NUMBERS[12]
10A3 EB0790               2022             JMP ASSIGN_TO_BCD
                          2023             
10A6                      2024     ASSIGN_BCD_VALUE_TO_P:
10A6 A0B901               2025             MOV AL, BCD_NUMBERS[13] 
10A9 EB0190               2026             JMP ASSIGN_TO_BCD
                          2027             
10AC                      2028     ASSIGN_TO_BCD:
10AC 8887BA01             2029             MOV DS:BCD_DISPLAY[BX], AL
10B0 43                   2030             INC BX
10B1 E2BF                 2031             LOOP CLEAR_SINGLE_BCD
                          2032             
10B3 C606C10100           2033             MOV TRIGGER_L_FLAG, 00H
10B8 C606C20100           2034             MOV TRIGGER_E_FLAG, 00H
10BD C606C30100           2035             MOV TRIGGER_A_FLAG, 00H
10C2 C606C40100           2036             MOV TRIGGER_P_FLAG, 00H
                          2037     
10C7 59                   2038             POP CX
10C8 5B                   2039             POP BX
10C9 58                   2040             POP AX
10CA CB                   2041             RET
                          2042     CLEAR_7SEGMENT ENDP
                          2043     
                          2044     
                          2045     ;Procedure that will display digits on the BCD based on the BCD queue
10CB                      2046     DISPLAY_7SEGMENT PROC FAR       
10CB 50                   2047             PUSH AX
10CC 53                   2048             PUSH BX
10CD 51                   2049             PUSH CX
10CE 52                   2050             PUSH DX
                          2051     
10CF 33DB                 2052             XOR BX, BX
                          2053             
                          2054             ; BCD Select: [-] [-] [6] [5] [4] [3] [2] [1]
10D1 BA0001               2055             MOV DX, PCS2_ADDR
10D4 B0FE                 2056             MOV AL, 0FEH
10D6 8A0EC001             2057             MOV CL, DS:CURRENT_BCD
10DA D2C0                 2058             ROL AL, CL
10DC EE                   2059             OUT DX, AL
                          2060             
10DD BA8001               2061             MOV DX, PCS3_ADDR
10E0 8A1EC001             2062             MOV BL, CURRENT_BCD
10E4 8A87BA01             2063             MOV AL, BCD_DISPLAY[BX]
10E8 EE                   2064             OUT DX, AL
                          2065             
10E9 FE06C001             2066             INC CURRENT_BCD
10ED 803EC00106           2067             CMP CURRENT_BCD, 06H
10F2 7403                 2068             JE RESET_CURRENT_BCD
10F4 EB0690               2069             JMP DISP_END
                          2070             
10F7                      2071     RESET_CURRENT_BCD:
10F7 C606C00100           2072             MOV CURRENT_BCD, 00H
                          2073     
10FC                      2074     DISP_END:       
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   43


LOC  OBJ                  LINE     SOURCE

10FC 5A                   2075             POP DX
10FD 59                   2076             POP     CX
10FE 5B                   2077             POP     BX
10FF 58                   2078             POP AX
1100 CB                   2079             RET
                          2080     DISPLAY_7SEGMENT ENDP
                          2081     
                          2082     
                          2083     ;Procedure that will play sounds on the speaker based on the speaker queue
1101                      2084     PLAY_SOUND PROC FAR     
1101 50                   2085             PUSH AX
1102 53                   2086             PUSH BX
1103 56                   2087             PUSH SI
1104 52                   2088             PUSH DX
                          2089             
1105 B8----         R     2090             MOV AX, DATA_SEG
1108 8ED8                 2091         MOV DS, AX
                          2092             
110A A0A801               2093             MOV AL, SOUND_HEAD
110D 3806A901             2094             CMP SOUND_TAIL, AL
1111 7470                 2095             JE SOUND_END
                          2096             
1113 33DB                 2097             XOR BX, BX
1115 8A1EA801             2098             MOV BL, SOUND_HEAD 
1119 8A9F8801             2099             MOV BL, SOUND_QUEUE[BX]
111D 8B87D000             2100             MOV AX, SOUND_SIZE[BX]
                          2101             
1121 833E860100           2102             CMP SOUND_COUNT, 0000H
1126 7438                 2103             JE ASSIGN_ADDRESS
1128 39068601             2104             CMP SOUND_COUNT, AX
112C 7E38                 2105             JLE SOUND_PLAY
                          2106             
112E FE06A801             2107             INC SOUND_HEAD
1132 803EA80120           2108             CMP SOUND_HEAD, 32
1137 7C05                 2109             JL SOUND_INITIALIZE_CONTINUE
1139 C606A80100           2110             MOV SOUND_HEAD, 00H
                          2111     
113E                      2112     SOUND_INITIALIZE_CONTINUE:
113E C70686010000         2113             MOV SOUND_COUNT, 0000H
1144 A0A801               2114             MOV AL, SOUND_HEAD
1147 3806A901             2115             CMP SOUND_TAIL, AL
114B 7436                 2116             JE SOUND_END
                          2117             
114D 33DB                 2118             XOR BX, BX
114F 8A1EA801             2119             MOV BL, SOUND_HEAD
1153 8A9F8801             2120             MOV BL, SOUND_QUEUE[BX]
1157 8B4776               2121             MOV AX, SOUND_OFFSET[BX]
115A A38401               2122             MOV SOUND_ADDRESS, AX
115D EB0790               2123             JMP SOUND_PLAY
                          2124             
1160                      2125     ASSIGN_ADDRESS:
1160 8B4776               2126             MOV AX, SOUND_OFFSET[BX]
1163 A38401               2127             MOV SOUND_ADDRESS, AX
                          2128             
1166                      2129     SOUND_PLAY:                             
8086/87/88/186 MACRO ASSEMBLER    TIMER                                                    05:53:37  12/09/;3  PAGE   44


LOC  OBJ                  LINE     SOURCE

1166 8B368401             2130             MOV SI, SOUND_ADDRESS
116A 8B872A01             2131             MOV AX, EEPROM_START[BX]
116E 8ED8                 2132             MOV DS, AX
                          2133             
1170 8A04                 2134             MOV AL, [SI]
1172 BA0002               2135             MOV DX, PCS4_ADDR
1175 EE                   2136             OUT DX, AL
                          2137                     
1176 B8----         R     2138             MOV AX, DATA_SEG
1179 8ED8                 2139         MOV DS, AX
                          2140             
117B FF068601             2141             INC SOUND_COUNT
117F FF068401             2142             INC SOUND_ADDRESS
                          2143     
1183                      2144     SOUND_END:      
1183 5A                   2145             POP DX
1184 5E                   2146             POP     SI
1185 5B                   2147             POP     BX
1186 58                   2148             POP AX
1187 CB                   2149             RET
                          2150     PLAY_SOUND ENDP
                          2151     
                          2152     
----                      2153     CODE_SEG        ENDS
                          2154     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
